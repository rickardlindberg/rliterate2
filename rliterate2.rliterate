{
"root_page":{
"children":[
{
"children":[],
"id":"165a1189e30f4ce5b22001ea8091aa9c",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"#!/usr/bin/env python3\n\nfrom collections import namedtuple, defaultdict\nfrom operator import add, sub, mul\nimport contextlib\nimport cProfile\nimport io\nimport json\nimport math\nimport os\nimport pstats\nimport sys\nimport textwrap\nimport time\nimport uuid\nimport wx\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"globals"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"functions"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"base base classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"base classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    main()\n",
"type":"code"
}
],
"id":"264da9dfb5c04b259a001f47538827a8",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"test_rliterate2.py"
],
"fragments":[
{
"text":"from unittest.mock import Mock, call\n\nimport rliterate2\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"test cases"
],
"prefix":"",
"type":"chunk"
}
],
"id":"f4e95a10e48249d1986d0a03569aa7d4",
"type":"code"
}
],
"title":"File"
},
{
"children":[],
"id":"48f01b615cea4ab8a229f1cb1c9b89a3",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def usage(script):\n    sys.exit(f\"usage: {script} <path>\")\n",
"type":"code"
}
],
"id":"665fd0f19f4f409eab4aa210dd7e61d2",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def parse_args():\n    args = {\n        \"path\": None,\n    }\n    script = sys.argv[0]\n    rest = sys.argv[1:]\n    if len(rest) != 1:\n        usage(script)\n    args[\"path\"] = rest[0]\n    return args\n",
"type":"code"
}
],
"id":"72a74e2e05dd46639122742c7832a0c1",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def main():\n    args = parse_args()\n    document = Document(args[\"path\"])\n    session = Session()\n    theme = Theme()\n    start_app(\n        MainFrame,\n        MainFrameProps(document, session, theme)\n    )\n",
"type":"code"
}
],
"id":"9e71e85a89e143fe86cb4b90a5eed8a7",
"type":"code"
}
],
"title":"Main"
},
{
"children":[
{
"children":[],
"id":"21c17f5017644b69b2698822a4ce524e",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class MainFrameProps(Props):\n\n    def __init__(self, document, session, theme):\n        Props.__init__(self, {\n            \"title\": PropUpdate(\n                document, [\"path\"],\n                format_title\n            ),\n            \"toolbar\": ToolbarProps(\n                theme\n            ),\n            \"toolbar_divider\": PropUpdate(\n                theme, [\"toolbar_divider\"]\n            ),\n            \"main_area\": MainAreaProps(\n                document,\n                session,\n                theme\n            ),\n        })\n",
"type":"code"
}
],
"id":"817bfdde2cd042328c69a297120bdf9d",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def format_title(path):\n    return \"{} ({}) - RLiterate 2\".format(\n        os.path.basename(path),\n        os.path.abspath(os.path.dirname(path))\n    )\n",
"type":"code"
}
],
"id":"ceb410e88dd140cba3a2ec03218f2102",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"frame MainFrame %layout_rows {\n    Toolbar(\n        #toolbar\n        %align[EXPAND]\n    )\n    RowDivider(\n        #toolbar_divider\n        %align[EXPAND]\n    )\n    MainArea(\n        #main_area\n        %align[EXPAND]\n        %proportion[1]\n    )\n}\n",
"type":"code"
}
],
"id":"7501efbaaca640c9aaf8e66a7309ad74",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
}
],
"title":"Main frame"
},
{
"children":[],
"id":"a52749c4dac1446ba6877e63f59b00d3",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class ToolbarProps(Props):\n\n    def __init__(self, theme):\n        Props.__init__(self, {\n            \"background\": PropUpdate(\n                theme, [\"toolbar\", \"background\"]\n            ),\n            \"margin\": PropUpdate(\n                theme, [\"toolbar\", \"margin\"]\n            ),\n            \"rotate_theme\": theme.rotate,\n        })\n",
"type":"code"
}
],
"id":"a2b6e1e17d804033bc21ab32625b15a9",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel Toolbar %layout_columns {\n    %space[#margin]\n    ToolbarButton(\n        icon = \"quit\"\n        %margin[#margin,TOP|BOTTOM]\n    )\n    ToolbarButton(\n        icon    = \"settings\"\n        @button = #rotate_theme()\n        %margin[#margin,TOP|BOTTOM]\n    )\n    %space[#margin]\n}\n",
"type":"code"
}
],
"id":"7d87330167694a41a0222b278aeb5aa5",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
}
],
"title":"Toolbar"
},
{
"children":[],
"id":"d71ac83d4f1f44acac0274181fe89635",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class MainAreaProps(Props):\n\n    def __init__(self, document, session, theme):\n        Props.__init__(self, {\n            \"toc\": TableOfContentsProps(\n                document,\n                session,\n                theme\n            ),\n            \"set_toc_width\": session.set_toc_width,\n            \"toc_divider\": PropUpdate(\n                theme, [\"toc_divider\"]\n            ),\n            \"workspace\": WorkspaceProps(\n                theme\n            ),\n        })\n",
"type":"code"
}
],
"id":"5d9b7a83066349ac9d47a1e72e4b561d",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel MainArea %layout_columns {\n    TableOfContents[toc](\n        #toc\n        %align[EXPAND]\n    )\n    ColumnDivider(\n        #toc_divider\n        cursor = \"size_horizontal\"\n        @drag  = self._on_toc_divider_drag(event)\n        %align[EXPAND]\n    )\n    Workspace(\n        #workspace\n        %align[EXPAND]\n        %proportion[1]\n    )\n}\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"MainArea"
],
"prefix":"",
"type":"chunk"
}
],
"id":"a8e40ef2da854034b55c8c7a3097e3ba",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes",
"MainArea"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def _on_toc_divider_drag(self, event):\n    if event.initial:\n        toc = self.get_widget(\"toc\")\n        self._start_width = toc.get_width()\n    else:\n        self.prop([\"set_toc_width\"])(\n            self._start_width + event.dx\n        )\n",
"type":"code"
}
],
"id":"72cfc592c2ea47e499de1164ed087bdb",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Main area"
},
{
"children":[
{
"children":[],
"id":"e23f4707dee34537a98e602ca3609133",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class TableOfContentsScrollAreaProps(Props):\n\n    def __init__(self, document, session, theme):\n        Props.__init__(self, {\n            \"theme\": PropUpdate(\n                theme, []\n            ),\n            \"set_hoisted_page\": session.set_hoisted_page,\n            \"toggle_collapsed\": session.toggle_collapsed,\n            \"total_num_pages\": PropUpdate(\n                document,\n                lambda document: document.count_pages()\n            ),\n            \"*\": PropUpdate(\n                document,\n                session, [\"toc\", \"collapsed\"],\n                session, [\"toc\", \"hoisted_page\"],\n                generate_rows_and_drop_points\n            ),\n        })\n",
"type":"code"
}
],
"id":"35fa6ae9b01d46edba595aeca5cacef7",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def generate_rows_and_drop_points(document, collapsed, hoisted_page):\n    def traverse(page, level=0):\n        is_collapsed = page[\"id\"] in collapsed\n        num_children = len(page[\"children\"])\n        rows.append({\n            \"id\": page[\"id\"],\n            \"title\": page[\"title\"],\n            \"level\": level,\n            \"has_children\": num_children > 0,\n            \"collapsed\": is_collapsed,\n        })\n        if is_collapsed:\n            target_index = num_children\n        else:\n            target_index = 0\n        drop_points.append(TableOfContentsDropPoint(\n            row_index=len(rows)-1,\n            target_index=target_index,\n            target_page=page[\"id\"],\n            level=level+1\n        ))\n        if not is_collapsed:\n            for target_index, child in enumerate(page[\"children\"]):\n                traverse(child, level+1)\n                drop_points.append(TableOfContentsDropPoint(\n                    row_index=len(rows)-1,\n                    target_index=target_index+1,\n                    target_page=page[\"id\"],\n                    level=level+1\n                ))\n    rows = []\n    drop_points = []\n    traverse(document.get_page(hoisted_page))\n    return {\n        \"rows\": rows,\n        \"drop_points\": drop_points,\n    }\n",
"type":"code"
}
],
"id":"ffa2e88613e34a1b98bcc17a7e7da68d",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"TableOfContentsDropPoint = namedtuple(\"TableOfContentsDropPoint\", [\n    \"row_index\",\n    \"target_index\",\n    \"target_page\",\n    \"level\",\n])\n",
"type":"code"
}
],
"id":"e4ac2f799aaa48fb90230bff0e404d6f",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"vscroll TableOfContentsScrollArea %layout_rows {\n    drop_target = \"page\"\n    loop (#rows cache_limit=sub(#total_num_pages 1)) {\n        TableOfContentsRow[rows](\n            row              = $\n            theme            = #theme\n            set_hoisted_page = #set_hoisted_page\n            toggle_collapsed = #toggle_collapsed\n            __reuse          = $id\n            __cache          = True\n            %align[EXPAND]\n        )\n    }\n}\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"TableOfContentsScrollArea"
],
"prefix":"",
"type":"chunk"
}
],
"id":"e0db56dacc9f4aa3b223033b6feee2f2",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes",
"TableOfContentsScrollArea"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"_last_drop_row = None\n\ndef on_drag_drop_over(self, x, y):\n    self._hide()\n    drop_point = self._get_drop_point(x, y)\n    if drop_point is not None:\n        self._last_drop_row = self._get_drop_row(drop_point)\n    if self._last_drop_row is not None:\n        self._last_drop_row.show_drop_line(\n            self._calculate_indent(drop_point.level)\n        )\n\ndef on_drag_drop_leave(self):\n    self._hide()\n\ndef on_drag_drop_data(self, x, y, page_info):\n    print(f\"page_info = {page_info}\")\n\ndef _hide(self):\n    if self._last_drop_row is not None:\n        self._last_drop_row.hide_drop_line()\n\ndef _get_drop_point(self, x, y):\n    lines = defaultdict(list)\n    for drop_point in self.prop([\"drop_points\"]):\n        lines[\n            self._y_distance_to(\n                self._get_drop_row(drop_point),\n                y\n            )\n        ].append(drop_point)\n    if lines:\n        columns = {}\n        for drop_point in lines[min(lines.keys())]:\n            columns[self._x_distance_to(drop_point, x)] = drop_point\n        return columns[min(columns.keys())]\n\ndef _get_drop_row(self, drop_point):\n    return self.get_widget(\"rows\", drop_point.row_index)\n\ndef _y_distance_to(self, row, y):\n    span_y_center = row.get_y() + row.get_drop_line_y_offset()\n    return int(abs(span_y_center - y))\n\ndef _x_distance_to(self, drop_point, x):\n    return int(abs(self._calculate_indent(drop_point.level + 1) - x))\n\ndef _calculate_indent(self, level):\n    return (\n        (2 * self.prop([\"theme\", \"toc\", \"row_margin\"])) +\n        (level + 1) * self.prop([\"theme\", \"toc\", \"indent_size\"])\n    )\n",
"type":"code"
}
],
"id":"c4fd9a57c01d4e5cb2482f3ab5c9ca3a",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Scroll area"
},
{
"children":[
{
"children":[],
"id":"ef8200090225487eab4ae35d8910ba8e",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel TableOfContentsRowText %layout_columns {\n    %space[add(#theme.row_margin mul(#level #theme.indent_size))]\n    if (#has_children) {\n        ExpandCollapse(\n            cursor    = \"hand\"\n            size      = #theme.indent_size\n            collapsed = #collapsed\n            @click    = #toggle_collapsed(#id)\n            @drag     = None\n            %align[EXPAND]\n        )\n    } else {\n        %space[#theme.indent_size]\n    }\n    Text(\n        text       = #title\n        foreground = #theme.foreground\n        %align[EXPAND]\n        %margin[#theme.row_margin,ALL]\n    )\n}\n",
"type":"code"
}
],
"id":"e70e2005249e4fa29780c11f6dd1bb4c",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
}
],
"title":"Text"
},
{
"children":[],
"id":"97827e5f0096482a9a4eadf0ce07764f",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel TableOfContentsDropLine %layout_columns {\n    %space[#indent]\n    RowDivider(\n        thickness = #thickness\n        color     = self._get_color(#active #color)\n        %align[EXPAND]\n        %proportion[1]\n    )\n}\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"TableOfContentsDropLine"
],
"prefix":"",
"type":"chunk"
}
],
"id":"694e000149dc4360a11c1edbad630e61",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes",
"TableOfContentsDropLine"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def _get_color(self, active, color):\n    if active:\n        return color\n    else:\n        return None\n",
"type":"code"
}
],
"id":"af4a8d12629747ed8d150c16545df3a1",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Drop line"
}
],
"id":"cf689824aa3641828343eba2b5fbde9f",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel TableOfContentsRow %layout_rows {\n    TableOfContentsRowText(\n        #row\n        theme            = #theme.toc\n        toggle_collapsed = #toggle_collapsed\n        @drag            = self._on_drag(event #row.id)\n        @click           = #set_hoisted_page(#row.id)\n        %align[EXPAND]\n    )\n    TableOfContentsDropLine[drop_line](\n        indent      = 0\n        active      = False\n        thickness   = #theme.toc.divider_thickness\n        color       = #theme.dragdrop_color\n        %align[EXPAND]\n    )\n}\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"TableOfContentsRow"
],
"prefix":"",
"type":"chunk"
}
],
"id":"f713af928d5c4317b142764463bb1e72",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes",
"TableOfContentsRow"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def _on_drag(self, event, page_id):\n    if math.sqrt(event.dx**2 + event.dy**2) > 3:\n        event.initiate_drag_drop(\"page\", {\"page_id\": page_id})\n",
"type":"code"
}
],
"id":"8644bf90994a4027b8e11e560c71cb7d",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"classes",
"TableOfContentsRow"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def get_drop_line_y_offset(self):\n    drop_line = self.get_widget(\"drop_line\")\n    return drop_line.get_y() + drop_line.get_height() / 2\n",
"type":"code"
}
],
"id":"afdc8c91f40247f4a87d93e4a7751d3e",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"classes",
"TableOfContentsRow"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def show_drop_line(self, indent):\n    self.get_widget(\"drop_line\").update_props({\n        \"active\": True,\n        \"indent\": indent\n    })\n",
"type":"code"
}
],
"id":"4c4b0b69e3d74bc9a33b27fcb30442ca",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"classes",
"TableOfContentsRow"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def hide_drop_line(self):\n    self.get_widget(\"drop_line\").update_props({\n        \"active\": False,\n    })\n",
"type":"code"
}
],
"id":"a03b73369d1e4135ae2ceeca65d4f1af",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Row"
}
],
"id":"1f79ba6407164d8dbcc3f2e90f409093",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class TableOfContentsProps(Props):\n\n    def __init__(self, document, session, theme):\n        Props.__init__(self, {\n            \"theme\": PropUpdate(\n                theme, [\"toc\"]\n            ),\n            \"width\": PropUpdate(\n                session, [\"toc\", \"width\"]\n            ),\n            \"hoisted_page\": PropUpdate(\n                session, [\"toc\", \"hoisted_page\"]\n            ),\n            \"set_hoisted_page\": session.set_hoisted_page,\n            \"scroll_area\": TableOfContentsScrollAreaProps(\n                document,\n                session,\n                theme\n            ),\n        })\n",
"type":"code"
}
],
"id":"2a866818635048c794a1a4be3e35509d",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel TableOfContents %layout_rows {\n    min_size   = size(max(50 #width) -1)\n    background = #theme.background\n    if (#hoisted_page) {\n        Button(\n            label = \"unhoist\"\n            %margin[add(1 #theme.row_margin),ALL]\n            %align[EXPAND]\n            @button = #set_hoisted_page(None)\n        )\n    }\n    TableOfContentsScrollArea(\n        #scroll_area\n        %align[EXPAND]\n        %proportion[1]\n    )\n}\n",
"type":"code"
}
],
"id":"84a1b00ef8b24ddda9acafe75d810c1c",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
}
],
"title":"Table of contents"
},
{
"children":[],
"id":"e6a157bbac8842a2b8c625bfa9255159",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class WorkspaceProps(Props):\n\n    def __init__(self, theme):\n        Props.__init__(self, {\n            \"background\": PropUpdate(\n                theme, [\"workspace\", \"background\"]\n            )\n        })\n",
"type":"code"
}
],
"id":"1bd7139b569d41039b4661e345deb68d",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel Workspace %layout_columns {\n}\n",
"type":"code"
}
],
"id":"3e408b8af8bf432f9db783f07ea161d8",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
}
],
"title":"Workspace"
},
{
"children":[],
"id":"b022c98477a04ed2a492e75f63e75796",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel RowDivider %layout_columns {\n    background = #color\n    min_size   = size(-1 #thickness)\n}\n",
"type":"code"
}
],
"id":"6b9bbfc9a6cd4bb88cea712ebb9909dd",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel ColumnDivider %layout_rows {\n    background = #color\n    min_size   = size(#thickness -1)\n}\n",
"type":"code"
}
],
"id":"5c17f50053b24b4cadb41b3de44a038a",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
}
],
"title":"Dividers"
}
],
"id":"d625649aae0a40bcb3e2e8cc9ede4373",
"paragraphs":[],
"title":"GUI"
},
{
"children":[],
"id":"27c8072213a94090a6d0d5e1362ab3ed",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Document(Immutable):\n\n    def __init__(self, path):\n        Immutable.__init__(self, {\n            \"path\": path,\n            \"doc\": load_document_from_file(path),\n        })\n\n    def get_page(self, page_id=None):\n        root_page = self.get([\"doc\", \"root_page\"])\n        if page_id is None:\n            return root_page\n        for page in self.iter_pages(root_page):\n            if page[\"id\"] == page_id:\n                return page\n        return None\n\n    def count_pages(self):\n        return len(list(self.iter_pages(self.get_page())))\n\n    def iter_pages(self, page):\n        yield page\n        for child in page[\"children\"]:\n            for x in self.iter_pages(child):\n                yield x\n",
"type":"code"
}
],
"id":"fb0708b0726240f18415dd1e63cff22d",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def load_document_from_file(path):\n    if os.path.exists(path):\n        return load_json_from_file(path)\n    else:\n        return create_new_document()\n",
"type":"code"
}
],
"id":"7f67cb9003a14964a74bf495a8cce6f8",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def create_new_document():\n    return {\n        \"root_page\": create_new_page(),\n        \"variables\": {},\n    }\n",
"type":"code"
}
],
"id":"1c35c112ce9f41659a6a6c8a4062f564",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def create_new_page():\n    return {\n        \"id\": genid(),\n        \"title\": \"New page...\",\n        \"children\": [],\n        \"paragraphs\": [],\n    }\n",
"type":"code"
}
],
"id":"62b40e83cdde43209245d76e123bdb5a",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def genid():\n    return uuid.uuid4().hex\n",
"type":"code"
}
],
"id":"e6bca528d2f94219b720e92cd5ddf925",
"type":"code"
}
],
"title":"Document"
},
{
"children":[],
"id":"2bdaa3b1373945e0bb8ae77a1735df50",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Theme(Immutable):\n\n    DEFAULT = {\n        \"toolbar\": {\n            \"margin\": 4,\n            \"background\": None,\n        },\n        \"toolbar_divider\": {\n            \"thickness\": 1,\n            \"color\": \"#aaaaaf\",\n        },\n        \"toc\": {\n            \"background\": \"#ffffff\",\n            \"foreground\": \"#000000\",\n            \"indent_size\": 20,\n            \"row_margin\": 2,\n            \"divider_thickness\": 2,\n        },\n        \"toc_divider\": {\n            \"thickness\": 3,\n            \"color\": \"#aaaaaf\",\n        },\n        \"workspace\": {\n            \"background\": \"#cccccc\",\n        },\n        \"dragdrop_color\": \"#ff6400\",\n    }\n\n    ALTERNATIVE = {\n        \"toolbar\": {\n            \"margin\": 6,\n            \"background\": \"#ffcfcf\",\n        },\n        \"toolbar_divider\": {\n            \"thickness\": 2,\n            \"color\": \"#aaaaff\",\n        },\n        \"toc\": {\n            \"background\": \"#cfcfff\",\n            \"foreground\": \"#0ddd00\",\n            \"indent_size\": 25,\n            \"row_margin\": 3,\n            \"divider_thickness\": 3,\n        },\n        \"toc_divider\": {\n            \"thickness\": 5,\n            \"color\": \"#aaaadf\",\n        },\n        \"workspace\": {\n            \"background\": \"#cc99cc\",\n        },\n        \"dragdrop_color\": \"#ff6444\",\n    }\n\n    def __init__(self):\n        Immutable.__init__(self, self.DEFAULT)\n\n    def rotate(self):\n        if self.get([]) is self.ALTERNATIVE:\n            self.replace([], self.DEFAULT)\n        else:\n            self.replace([], self.ALTERNATIVE)\n",
"type":"code"
}
],
"id":"fd85c4b0d0e34d6ea885dd572220e7ad",
"type":"code"
}
],
"title":"Theme"
},
{
"children":[],
"id":"0855548dfdab4aa68ae8e256f8a8fe0a",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Session(Immutable):\n\n    def __init__(self):\n        Immutable.__init__(self, {\n            \"toc\": {\n                \"width\": 230,\n                \"collapsed\": [],\n                \"hoisted_page\": None,\n            },\n        })\n\n    def set_hoisted_page(self, page_id):\n        self.replace([\"toc\", \"hoisted_page\"], page_id)\n\n    def set_toc_width(self, width):\n        self.replace([\"toc\", \"width\"], width)\n\n    def toggle_collapsed(self, page_id):\n        def toggle(collapsed):\n            if page_id in collapsed:\n                return [x for x in collapsed if x != page_id]\n            else:\n                return collapsed + [page_id]\n        self.modify([\"toc\", \"collapsed\"], toggle)\n",
"type":"code"
}
],
"id":"4e201e17e50241629bb3ac376d482c59",
"type":"code"
}
],
"title":"Session"
},
{
"children":[
{
"children":[],
"id":"fa9c9667abb14d34b60ec36cc4188b99",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"#!/usr/bin/env python2\n\nfrom collections import defaultdict\nimport sys\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"rlmeta support library"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"grammars"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"support functions"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    parser = GuiParser()\n    codegenerator = WxCodeGenerator()\n    try:\n        sys.stdout.write(\n            codegenerator.run(\"ast\", parser.run(\"widget\", sys.stdin.read()))\n        )\n    except _MatchError as e:\n        sys.exit(e.describe())\n",
"type":"code"
}
],
"id":"e8901611eb4941229bd35edab5f6e8b7",
"type":"code"
},
{
"chunkpath":[
"rlmeta support library"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"# Placeholder to generate RLMeta support library\n",
"type":"code"
}
],
"id":"7f08cdb6050944b98378a4b4106105d9",
"language":"",
"post_process":[
"python",
"rlmeta/rlmeta.py",
"--support"
],
"type":"code"
}
],
"title":"Compiler"
},
{
"children":[
{
"children":[],
"id":"35d081d36a7546bbb2c4785312fb3a12",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiMixin(object):\n\n    def __init__(self, parent, handlers, props):\n        self._parent = parent\n        self._props = {}\n        self._builtin_props = {}\n        self._event_handlers = {}\n        self._setup_gui()\n        self.update_event_handlers(handlers)\n        self.update_props(props, parent_updated=True)\n\n    def update_event_handlers(self, handlers):\n        for name, fn in handlers.items():\n            self.register_event_handler(name, fn)\n\n    @profile_sub(\"register event\")\n    def register_event_handler(self, name, fn):\n        self._event_handlers[name] = profile(f\"on_{name}\")(profile_sub(f\"on_{name}\")(fn))\n\n    def call_event_handler(self, name, event, propagate=False):\n        if self.has_event_handler(name):\n            self._event_handlers[name](event)\n        elif self._parent is not None and propagate:\n            self._parent.call_event_handler(name, event, True)\n\n    def has_event_handler(self, name):\n        return name in self._event_handlers\n\n    def _setup_gui(self):\n        pass\n\n    def prop_with_default(self, path, default):\n        try:\n            return self.prop(path)\n        except (KeyError, IndexError):\n            return default\n\n    def prop(self, path):\n        value = self._props\n        for part in path:\n            value = value[part]\n        return value\n\n    def update_props(self, props, parent_updated=False):\n        if self._update_props(props):\n            self._update_gui(parent_updated)\n\n    def _update_props(self, props):\n        self._changed_props = []\n        for p in [lambda: props, self._get_local_props]:\n            for key, value in p().items():\n                if self._prop_differs(key, value):\n                    self._props[key] = value\n                    self._changed_props.append(key)\n        return len(self._changed_props) > 0\n\n    def _get_local_props(self):\n        return {}\n\n    def _prop_differs(self, key, value):\n        if key not in self._props:\n            return True\n        prop = self._props[key]\n        if prop is value:\n            return False\n        return prop != value\n\n    def _update_gui(self, parent_updated):\n        for name in self._changed_props:\n            if name in self._builtin_props:\n                self._builtin_props[name](self._props[name])\n\n    @profile_sub(\"register builtin\")\n    def _register_builtin(self, name, fn):\n        self._builtin_props[name] = profile_sub(f\"builtin {name}\")(fn)\n",
"type":"code"
}
],
"id":"a0987644a69445dea88e612f31f16eba",
"type":"code"
}
],
"title":"Base widget mixin"
},
{
"children":[],
"id":"1e1f413afddb40338c7b0fa6ed7de74e",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"DragEvent = namedtuple(\"DragEvent\", \"initial,dx,dy,initiate_drag_drop\")\n",
"type":"code"
}
],
"id":"c271e666cf75407b9f4d10b0860cbae8",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"SliderEvent = namedtuple(\"SliderEvent\", \"value\")\n",
"type":"code"
}
],
"id":"b1c7ca14119b4dd4ad86f666c81806b3",
"type":"code"
}
],
"title":"Events"
},
{
"children":[],
"id":"08bc729869634744b018f65f4d968a49",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Props(Immutable):\n\n    def __init__(self, props, child_props={}):\n        self.dependencies = set()\n        self.changed_paths = []\n        data = {}\n        for name, value in props.items():\n            if isinstance(value, Props):\n                value.listen(self._create_props_handler(name, value))\n                self._set_initial(data, name, value.get())\n                self.dependencies.update(value.dependencies)\n            elif isinstance(value, PropUpdate):\n                self.dependencies.update(\n                    value.parse(self._create_prop_update_handler(name, value))\n                )\n                self._set_initial(data, name, value.eval())\n            else:\n                data[name] = value\n        for dep in self.dependencies:\n            dep.listen(self._propagate_changes)\n        Immutable.__init__(self, data)\n\n    def _propagate_changes(self):\n        self._notify(self.changed_paths)\n        self.changed_paths.clear()\n\n    def _create_props_handler(self, name, props):\n        def handler():\n            self.changed_paths.extend(self._modify(\n                self._modify_items(name, props.get()),\n                only_if_differs=False\n            ))\n        return handler\n\n    def _create_prop_update_handler(self, name, prop_update):\n        def handler():\n            self.changed_paths.extend(self._modify(\n                self._modify_items(name, prop_update.eval()),\n                only_if_differs=True\n            ))\n        return handler\n\n    def _set_initial(self, data, name, value):\n        if \"*\" in name:\n            data.update(value)\n        else:\n            data[name] = value\n\n    def _modify_items(self, name, value):\n        items = []\n        if \"*\" in name:\n            for sub_name, sub_value in value.items():\n                items.append(self._modify_item(sub_name, sub_value))\n        else:\n            items.append(self._modify_item(name, value))\n        return items\n\n    def _modify_item(self, name, value):\n        return ([name], lambda old_value: value)\n",
"type":"code"
}
],
"id":"c46f943de6a340e286c6c6eefe9b61a2",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class PropUpdate(object):\n\n    def __init__(self, *args):\n        self._args = args\n\n    def parse(self, handler):\n        dependencies = set()\n        self._fn = lambda x: x\n        self._inputs = []\n        items = list(self._args)\n        while items:\n            item = items.pop(0)\n            if (isinstance(item, Immutable) and\n                items and\n                isinstance(items[0], list)):\n                path = items.pop(0)\n                self._inputs.append((item, path))\n                item.listen(handler, prefix=path)\n                dependencies.add(item)\n            elif isinstance(item, Immutable):\n                self._inputs.append((item, None))\n                item.listen(handler)\n                dependencies.add(item)\n            elif callable(item) and not items:\n                self._fn = item\n            else:\n                self._inputs.append((item, None))\n        return dependencies\n\n    def eval(self):\n        args = []\n        for obj, path in self._inputs:\n            if path is None:\n                args.append(obj)\n            else:\n                args.append(obj.get(path))\n        return self._fn(*args)\n",
"type":"code"
}
],
"id":"ea68520c1a57480dba1151de9685cac4",
"type":"code"
}
],
"title":"Props"
}
],
"id":"da31b318d9f2479496494b3e56985a07",
"paragraphs":[],
"title":"Support library"
},
{
"children":[
{
"children":[],
"id":"05f21609be344a7396ee38ae3c05e278",
"paragraphs":[
{
"chunkpath":[
"grammars"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"GuiParser {\n  widget ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    container:container WS NAME:name layout:layout\n    WS '{' widgetBody:body WS '}' ' '* '\\n'? .*:verbatim -> [\n      \"widget\"\n      name\n      container\n      layout\n      extract(body \"prop\")\n      extract(body \"instance\")\n      join(verbatim)\n    ]\n  container ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    WS (\n      | 'frame'\n      | 'panel'\n      | 'vscroll'\n    ):x WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"container\" x]\n  layout ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    WS (\n      | '%layout_rows'\n      | '%layout_columns'\n    ):x WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layout\" x]\n  widgetBody ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    (\n      | instance\n      | prop\n    )*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> partition(xs)\n  instance ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS 'loop' WS '(' expr:x WS loopOption*:ys WS ')'\n      WS '{' instanceInner*:zs WS '}' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" \"%loop\" x ys zs]\n    | WS 'if' WS '(' expr:x WS ')'\n      WS '{' instanceInner*:ys WS '}'\n      WS 'else' WS '{' instanceInner*:zs WS '}' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" \"%if\" x ys zs]\n    | WS 'if' WS '(' expr:x WS ')'\n      WS '{' instanceInner*:ys WS '}' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" \"%if\" x ys]\n    | instanceInner\n  loopOption =\n    | WS 'cache_limit' WS '=' WS expr:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"loopOption\" \"cache_limit\" x]\n  instanceInner ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS '%space' WB WS '[' expr:x WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" \"%space\" x]\n    | WS NAME:x instanceName:ys WS\n      '(' instanceBody*:zs WS ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" x [~ys ~zs]]\n  instanceName =\n    | WS '[' WS NAME:x WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [[\"instanceName\" x]]\n    | ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> []\n  instanceBody ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | layoutAttribute\n    | loopvarExplode\n    | propExplode\n    | propAssign\n    | handler\n  layoutAttribute ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS '%proportion[' number:x WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layoutAttribute\" \"proportion\" x]\n    | WS '%align[' WS 'EXPAND' WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layoutAttribute\" \"align\" \"expand\"]\n    | WS '%margin[' expr:x ',' margins:y WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layoutAttribute\" \"margin\" x ~y]\n  margins ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= margin:x ('|' margin)*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [x ~xs]\n  margin ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= (\n    | 'TOP'\n    | 'BOTTOM'\n    | 'LEFT'\n    | 'RIGHT'\n    | 'ALL'\n  ):x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"margin\" x]\n  propRef ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= propChain:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propRef\" x]\n  propExplode ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= propChain:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propExplode\" x]\n  propChain ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS '#' NAME:x ('.' NAME)*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propChain\" x ~xs]\n    | WS '#' WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propChain\"]\n  propAssign ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NAME:x WS '=' expr:y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propAssign\" x y]\n  handler ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS '@' NAME:x WS '=' expr:y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"handler\" x y]\n  expr ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= expr1:x ('.' expr1)*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"chain\" x ~xs]\n  expr1 ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= (string | call | number | propRef | identifier | loopvarRef | bool | none)\n  string ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS STRING:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"string\" x]\n  bool ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS 'True' WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"bool\" bool(\" \")]\n    | WS 'False' WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"bool\" bool(\"\")]\n  none ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS 'None' WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"none\"]\n  call ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    (identifier|propRef):x '(' expr*:xs WS ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"call\" x ~xs]\n  number ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NUMBER:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"number\" x]\n  identifier ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NAME:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"identifier\" x]\n  loopvarRef ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= loopvarChain:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"loopvarRef\" x]\n  loopvarExplode ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= loopvarChain:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"loopvarExplode\" x]\n  loopvarChain ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS '$' NAME:x ('.' NAME)*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"loopvarChain\" x ~xs]\n    | WS '$' WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"loopvarChain\"]\n  prop ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NAME:x WS '=' expr:y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"prop\" x y]\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"GuiParser"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"d69da27c0c3046f08ad2347433cdaaf3",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
},
{
"chunkpath":[
"grammars",
"GuiParser"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"NUMBER ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= ('-' | -> \"\"):x DIGIT:y DIGIT*:ys ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> int(join([x y ~ys]))\nDIGIT ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= '0'-'9'\nNAME ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= NAMESTART:x NAMECHAR*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> join([x ~xs])\nNAMESTART ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z' | '_'\nNAMECHAR ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= NAMESTART | '0'-'9'\nSTRING ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= '\"' (!'\"' .)*:xs '\"' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> join(xs)\nWS ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= (' ' | '\\n')*\nWB ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= !NAMECHAR\n",
"type":"code"
}
],
"id":"bd877f114acc489a93f3088e4fd98358",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
},
{
"chunkpath":[
"support functions"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def join(items, sep=\"\"):\n    return sep.join(items)\n",
"type":"code"
}
],
"id":"b762d2f9dacf44c0914eadb32ef5d1fc",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"support functions"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def partition(values):\n    by_type = defaultdict(list)\n    for x in values:\n        by_type[x[0]].append(x)\n    return by_type\n",
"type":"code"
}
],
"id":"cdbf7f0cd1754a718c370450a4f01496",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"support functions"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def extract(by_type, name):\n    return by_type[name]\n",
"type":"code"
}
],
"id":"5e88fc430da84fc1a21ffe6afa2b4e44",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Parser"
},
{
"children":[],
"id":"347b1111a1a54adb8bde870d06cbf49e",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"rlgui_lexer",
"__init__.py"
],
"fragments":[
{
"text":"from pygments.lexer import RegexLexer\nfrom pygments.token import *\n\nclass RLGuiLexer(RegexLexer):\n\n    name = 'RLGui'\n    aliases = ['rlgui']\n    filenames = ['*.rlgui']\n\n    tokens = {\n        'root': [\n            (r'\"', String, \"string\"),\n            (r'[=]', Name.Builtin),\n            (r'\\b(vscroll|frame|panel|loop|if|else|True|False|None|cache_limit)\\b', Keyword),\n            (r'#(\\w+([.]\\w+)*)?', Name.Class),\n            (r'[$]\\w*', Name.Builtin),\n            (r'@\\w+', Name.Exception),\n            (r'%\\w+', Comment),\n            (r'.', Text),\n        ],\n        'string': [\n            (r'[^\"\\\\]+', String),\n            (r'\"', String, \"#pop\"),\n        ],\n    }\n\n",
"type":"code"
}
],
"id":"e3b741de46484d63b5de7ea5d0479290",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"setup.py"
],
"fragments":[
{
"text":"from setuptools import setup\n\nsetup(\n    name='rlgui_lexer',\n    version='0.1',\n    packages=['rlgui_lexer'],\n    entry_points={\n        'pygments.lexers': ['rlgui_lexer=rlgui_lexer:RLGuiLexer'],\n    },\n    zip_safe=False,\n)\n",
"type":"code"
}
],
"id":"16592d2a3f3640eca209a07274bbcaba",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"install.sh"
],
"fragments":[
{
"text":"#!/bin/sh\n\nset -e\n\npip install --upgrade --user .\n",
"type":"code"
}
],
"id":"31514c5ac3f64c978ecdbf9cdc36711a",
"type":"code"
}
],
"title":"Pygments plugin"
}
],
"id":"26afd5121ebb4f6eafe5ccb1e934ffd3",
"paragraphs":[],
"title":"Front end"
},
{
"children":[
{
"children":[],
"id":"7c7bfc3d69a0434ab62157bd6f274209",
"paragraphs":[
{
"chunkpath":[
"grammars"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"WxCodeGenerator {\n  ast = [%:x] -> x\n  astItems =\n    | ast:x astItem*:xs -> { x xs }\n    |                   -> {}\n  astItem = ast:x -> { \", \" x }\n  widget = .:name ast:container ast:sizer [ast*:props] [ast*:inst] .:verbatim -> {\n    \"class \" name \"(\" container \"):\\n\\n\" >\n      \"def _get_local_props(self):\\n\" >\n        \"return {\\n\" >\n          props\n        < \"}\\n\\n\"\n      <\n      \"def _create_sizer(self):\\n\" >\n        \"return \" sizer \"\\n\\n\"\n      <\n      \"def _create_widgets(self):\\n\" >\n        \"pass\\n\"\n        inst\n      <\n      verbatim\n    <\n  }\n  instance =\n    | \"%space\" ast:x -> {\n      \"self._create_space(\" x \")\\n\"\n    }\n    | .:name [ast*:xs] -> {\n      \"props = {}\\n\"\n      \"sizer = {\\\"flag\\\": 0, \\\"border\\\": 0, \\\"proportion\\\": 0}\\n\"\n      \"name = None\\n\"\n      \"handlers = {}\\n\"\n      xs\n      \"self._create_widget(\" name \", props, sizer, handlers, name)\\n\"\n    }\n    | \"%loop\" ast:x [ast*:ys] [ast*:zs] -> {\n      \"def loop_fn(loopvar):\\n\" >\n        \"pass\\n\"\n        zs\n      <\n      \"loop_options = {}\\n\"\n      ys\n      \"with self._loop(**loop_options):\\n\" >\n        \"for loopvar in \" x \":\\n\" >\n          \"loop_fn(loopvar)\\n\"\n        <\n      <\n    }\n    | \"%if\" ast:x ifTrue:y ifFalse:z -> {\n      \"if_condition = \" x \"\\n\"\n      y\n      z\n    }\n  instanceName =\n    | py:x -> { \"name = \" x \"\\n\" }\n    |      -> {}\n  loopOption = py:x ast:y -> { \"loop_options[\" x \"] = \" y \"\\n\" }\n  ifTrue = [ast:xs] -> {\n    \"def loop_fn(loopvar):\\n\" >\n      \"pass\\n\"\n      xs\n    <\n    \"with self._loop():\\n\" >\n      \"for loopvar in ([None] if (if_condition) else []):\\n\" >\n        \"loop_fn(loopvar)\\n\"\n      <\n    <\n  }\n  ifFalse =\n    | [ast:xs] -> {\n        \"def loop_fn(loopvar):\\n\" >\n          \"pass\\n\"\n          xs\n        <\n        \"with self._loop():\\n\" >\n          \"for loopvar in ([None] if (not if_condition) else []):\\n\" >\n            \"loop_fn(loopvar)\\n\"\n          <\n        <\n      }\n    | -> {}\n  layoutAttribute =\n    | \"proportion\" ast:x      -> { \"sizer[\\\"proportion\\\"] = \" x \"\\n\" }\n    | \"align\" \"expand\"        -> { \"sizer[\\\"flag\\\"] |= wx.EXPAND\\n\" }\n    | \"margin\" ast:x ast*:ys  -> { \"sizer[\\\"border\\\"] = \" x \"\\n\" ys }\n  margin =\n    | \"TOP\"    -> \"sizer[\\\"flag\\\"] |= wx.TOP\\n\"\n    | \"BOTTOM\" -> \"sizer[\\\"flag\\\"] |= wx.BOTTOM\\n\"\n    | \"LEFT\"   -> \"sizer[\\\"flag\\\"] |= wx.LEFT\\n\"\n    | \"RIGHT\"  -> \"sizer[\\\"flag\\\"] |= wx.RIGHT\\n\"\n    | \"ALL\"    -> \"sizer[\\\"flag\\\"] |= wx.ALL\\n\"\n  prop = py:name ast:default -> {\n    name \": \" default \",\\n\"\n  }\n  chain = ast:x chainAst*:xs -> { x xs }\n  chainAst = ast:x -> { \".\" x }\n  propRef = ast:x -> { \"self.prop(\" x \")\" }\n  propAssign = py:name ast:value -> { \"props[\" name \"] = \" value \"\\n\" }\n  propExplode = ast:x -> { \"props.update(self.prop(\" x \"))\\n\" }\n  propChain = .*:xs -> repr(xs)\n  loopvarRef = ast:x -> { \"loopvar\" x }\n  loopvarChain = loopvar*:xs -> { xs }\n  loopvar = py:x -> { \"[\" x \"]\" }\n  loopvarExplode = ast:x -> { \"props.update(loopvar\" x \")\\n\" }\n  call = ast:x astItems:y -> { x \"(\" y \")\" }\n  handler = py:name ast:y -> { \"handlers[\" name \"] = lambda event: \" y \"\\n\" }\n  layout =\n    | \"%layout_rows\"    -> \"wx.BoxSizer(wx.VERTICAL)\"\n    | \"%layout_columns\" -> \"wx.BoxSizer(wx.HORIZONTAL)\"\n  container =\n    | \"frame\"   -> \"RLGuiFrame\"\n    | \"panel\"   -> \"RLGuiPanel\"\n    | \"vscroll\" -> \"RLGuiVScroll\"\n  string = py\n  bool = py\n  none = -> \"None\"\n  number = py\n  identifier = .\n  py = .:x -> repr(x)\n}\n",
"type":"code"
}
],
"id":"68d4bdf87385458bbeda3cad93d14212",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
}
],
"title":"Code generator"
},
{
"children":[],
"id":"bb0987a3daff494cbaf93e74841f88a9",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiWxMixin(RLGuiMixin):\n\n    def _setup_gui(self):\n        RLGuiMixin._setup_gui(self)\n        self._setup_wx_events()\n        self._register_builtin(\"background\", self.SetBackgroundColour)\n        self._register_builtin(\"min_size\", self.SetMinSize)\n        self._register_builtin(\"drop_target\", self._set_drop_target)\n        self._register_builtin(\"cursor\", lambda value:\n            self.SetCursor({\n                \"size_horizontal\": wx.Cursor(wx.CURSOR_SIZEWE),\n                \"hand\": wx.Cursor(wx.CURSOR_HAND),\n            }.get(value, wx.Cursor(wx.CURSOR_QUESTION_ARROW)))\n        )\n        self._event_map = {\n            \"drag\": [\n                (wx.EVT_LEFT_DOWN, self._on_wx_left_down),\n                (wx.EVT_LEFT_UP, self._on_wx_left_up),\n                (wx.EVT_MOTION, self._on_wx_motion),\n            ],\n            \"click\": [\n                (wx.EVT_LEFT_UP, self._on_wx_left_up),\n            ],\n        }\n\n    def _setup_wx_events(self):\n        self._wx_event_handlers = set()\n        self._wx_down_pos = None\n\n    def _update_gui(self, parent_updated):\n        RLGuiMixin._update_gui(self, parent_updated)\n        for name in [\"drag\"]:\n            if self._parent is not None and self._parent.has_event_handler(name):\n                self._register_wx_events(name)\n\n    def update_event_handlers(self, handlers):\n        RLGuiMixin.update_event_handlers(self, handlers)\n        for name in handlers:\n            self._register_wx_events(name)\n\n    def _register_wx_events(self, name):\n        if name not in self._wx_event_handlers:\n            self._wx_event_handlers.add(name)\n            for event_id, handler in self._event_map.get(name, []):\n                self.Bind(event_id, handler)\n\n    def _on_wx_left_down(self, wx_event):\n        self._wx_down_pos = self.ClientToScreen(wx_event.Position)\n        self.call_event_handler(\"drag\", DragEvent(\n            True,\n            0,\n            0,\n            self.initiate_drag_drop\n        ), propagate=True)\n\n    def _on_wx_left_up(self, wx_event):\n        if self.HitTest(wx_event.Position) == wx.HT_WINDOW_INSIDE:\n            self.call_event_handler(\"click\", None)\n        self._wx_down_pos = None\n\n    def _on_wx_motion(self, wx_event):\n        if self._wx_down_pos is not None:\n            new_pos = self.ClientToScreen(wx_event.Position)\n            dx = new_pos.x-self._wx_down_pos.x\n            dy = new_pos.y-self._wx_down_pos.y\n            self.call_event_handler(\"drag\", DragEvent(\n                False,\n                dx,\n                dy,\n                self.initiate_drag_drop\n            ), propagate=True)\n\n    def initiate_drag_drop(self, kind, data):\n        self._wx_down_pos = None\n        obj = wx.CustomDataObject(f\"rliterate/{kind}\")\n        obj.SetData(json.dumps(data).encode(\"utf-8\"))\n        drag_source = wx.DropSource(self)\n        drag_source.SetData(obj)\n        result = drag_source.DoDragDrop(wx.Drag_DefaultMove)\n\n    def _set_drop_target(self, kind):\n        self.SetDropTarget(RLiterateDropTarget(self, kind))\n\n    def on_drag_drop_over(self, x, y):\n        pass\n\n    def on_drag_drop_leave(self):\n        pass\n\n    def on_drag_drop_data(self, x, y, data):\n        pass\n\n    def get_y(self):\n        return self.Position.y\n\n    def get_height(self):\n        return self.Size.height\n\n    def get_width(self):\n        return self.Size.width\n",
"type":"code"
}
],
"id":"b1beaccda0d04dd28ece317b5f5d8c55",
"type":"code"
},
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLiterateDropTarget(wx.DropTarget):\n\n    def __init__(self, widget, kind):\n        wx.DropTarget.__init__(self)\n        self.widget = widget\n        self.data = wx.CustomDataObject(f\"rliterate/{kind}\")\n        self.DataObject = self.data\n\n    def OnDragOver(self, x, y, defResult):\n        self.widget.on_drag_drop_over(x, y)\n        if defResult == wx.DragMove:\n            return wx.DragMove\n        return wx.DragNone\n\n    def OnData(self, x, y, defResult):\n        if (defResult == wx.DragMove and\n            self.GetData()):\n            wx.CallAfter(\n                self.widget.on_drag_drop_data,\n                x,\n                y,\n                json.loads(self.data.GetData().tobytes().decode(\"utf-8\"))\n            )\n        return defResult\n\n    def OnLeave(self):\n        self.widget.on_drag_drop_leave()\n",
"type":"code"
}
],
"id":"90ba1ddb6081476b83cb46991e35f180",
"type":"code"
}
],
"title":"Base wxPython mixin"
},
{
"children":[],
"id":"70714ee9823a41518a42251ffb370b01",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiWxContainerMixin(RLGuiWxMixin):\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._setup_layout()\n        self._children = []\n        self._inside_loop = False\n\n    def _setup_layout(self):\n        self.Sizer = self._sizer = self._create_sizer()\n        self._wx_parent = self\n\n    def _update_gui(self, parent_updated):\n        RLGuiWxMixin._update_gui(self, parent_updated)\n        self._sizer_index = 0\n        self._child_index = 0\n        self._names = defaultdict(list)\n        self._create_widgets()\n        if not parent_updated:\n            self._layout()\n\n    @profile_sub(\"layout\")\n    def _layout(self):\n        self.Layout()\n        self.Refresh()\n\n    def _create_widgets(self):\n        raise NotImplementedError()\n\n    @contextlib.contextmanager\n    def _loop(self, cache_limit=-1):\n        if self._child_index >= len(self._children):\n            self._children.append([])\n        old_children = self._children\n        next_index = self._child_index + 1\n        self._children = self._children[self._child_index]\n        self._child_index = 0\n        self._inside_loop = True\n        try:\n            yield\n        finally:\n            self._clear_leftovers(cache_limit=cache_limit)\n            self._children = old_children\n            self._child_index = next_index\n            self._inside_loop = False\n\n    def _clear_leftovers(self, cache_limit):\n        child_index = self._child_index\n        sizer_index = self._sizer_index\n        num_cached = 0\n        while child_index < len(self._children):\n            widget, sizer_item = self._children[child_index]\n            if (widget is not None and\n                widget.prop_with_default([\"__cache\"], False) and\n                (cache_limit < 0 or num_cached < cache_limit)):\n                sizer_item.Show(False)\n                child_index += 1\n                sizer_index += 1\n                num_cached += 1\n            else:\n                if widget is None:\n                    self._sizer.Remove(sizer_index)\n                else:\n                    widget.Destroy()\n                self._children.pop(child_index)\n\n    def _create_widget(self, widget_cls, props, sizer, handlers, name):\n        if not self._inside_loop:\n            def re_use_condition(widget):\n                return True\n        elif \"__reuse\" in props:\n            def re_use_condition(widget):\n                return (\n                    type(widget) is widget_cls and\n                    widget.prop([\"__reuse\"]) == props[\"__reuse\"]\n                )\n        else:\n            def re_use_condition(widget):\n                return type(widget) is widget_cls\n        re_use_offset = self._reuse(re_use_condition)\n        if re_use_offset == 0:\n            widget, sizer_item = self._children[self._child_index]\n            widget.update_event_handlers(handlers)\n            widget.update_props(props, parent_updated=True)\n            sizer_item.SetBorder(sizer[\"border\"])\n            sizer_item.SetProportion(sizer[\"proportion\"])\n        else:\n            if re_use_offset is None:\n                widget = widget_cls(self._wx_parent, self, handlers, props)\n            else:\n                widget = self._children.pop(self._child_index+re_use_offset)[0]\n                widget.update_event_handlers(handlers)\n                widget.update_props(props, parent_updated=True)\n                self._sizer.Detach(self._sizer_index+re_use_offset)\n            sizer_item = self._insert_sizer(self._sizer_index, widget, **sizer)\n            self._children.insert(self._child_index, (widget, sizer_item))\n        sizer_item.Show(True)\n        if name is not None:\n            self._names[name].append(widget)\n        self._sizer_index += 1\n        self._child_index += 1\n\n    def _create_space(self, thickness):\n        if (self._child_index < len(self._children) and\n            self._children[self._child_index][0] is None):\n            self._children[self._child_index][1].SetMinSize(\n                self._get_space_size(thickness)\n            )\n        else:\n            self._children.insert(self._child_index, (None, self._insert_sizer(\n                self._sizer_index,\n                self._get_space_size(thickness)\n            )))\n        self._sizer_index += 1\n        self._child_index += 1\n\n    def _reuse(self, condition):\n        index = 0\n        while (self._child_index+index) < len(self._children):\n            widget = self._children[self._child_index+index][0]\n            if widget is not None and condition(widget):\n                return index\n            else:\n                index += 1\n        return None\n\n    @profile_sub(\"insert sizer\")\n    def _insert_sizer(self, *args, **kwargs):\n        return self._sizer.Insert(*args, **kwargs)\n\n    def _get_space_size(self, size):\n        if self._sizer.Orientation == wx.HORIZONTAL:\n            return (size, 1)\n        else:\n            return (1, size)\n\n    def get_widget(self, name, index=0):\n        return self._names[name][index]\n",
"type":"code"
}
],
"id":"e09eeec305864f0e9a791b0e287def75",
"type":"code"
}
],
"title":"Container mixin"
},
{
"children":[
{
"children":[],
"id":"94401a3af3024aefa6e4bc11605b9ce1",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiFrame(wx.Frame, RLGuiWxContainerMixin):\n\n    def __init__(self, wx_parent, *args):\n        wx.Frame.__init__(self, wx_parent)\n        RLGuiWxContainerMixin.__init__(self, *args)\n\n    def _setup_gui(self):\n        RLGuiWxContainerMixin._setup_gui(self)\n        self._register_builtin(\"title\", self.SetTitle)\n\n    def _setup_layout(self):\n        self._wx_parent = wx.Panel(self)\n        self._wx_parent.Sizer = self._sizer = self._create_sizer()\n        self.Sizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.Sizer.Add(self._wx_parent, flag=wx.EXPAND, proportion=1)\n",
"type":"code"
}
],
"id":"1f2d77d65d6345b884d7755a1e963332",
"type":"code"
}
],
"title":"Frame"
},
{
"children":[],
"id":"65b8f97d115941a586dde12c4d78f93c",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiPanel(wx.Panel, RLGuiWxContainerMixin):\n\n    def __init__(self, wx_parent, *args):\n        wx.Panel.__init__(self, wx_parent)\n        RLGuiWxContainerMixin.__init__(self, *args)\n",
"type":"code"
}
],
"id":"c16e05ddb3ef4549ad64ffc3f46a411a",
"type":"code"
}
],
"title":"Panel"
},
{
"children":[],
"id":"6934ccab15d043f687656bff6bffc019",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class CompactScrolledWindow(wx.ScrolledWindow):\n\n    MIN_WIDTH = 200\n    MIN_HEIGHT = 200\n\n    def __init__(self, parent, style=0, size=wx.DefaultSize, step=100):\n        w, h = size\n        size = (max(w, self.MIN_WIDTH), max(h, self.MIN_HEIGHT))\n        wx.ScrolledWindow.__init__(self, parent, style=style, size=size)\n        self.Size = size\n        if style == wx.HSCROLL:\n            self.SetScrollRate(1, 0)\n            self._calc_scroll_pos = self._calc_scroll_pos_hscroll\n        elif style == wx.VSCROLL:\n            self.SetScrollRate(0, 1)\n            self._calc_scroll_pos = self._calc_scroll_pos_vscroll\n        else:\n            self.SetScrollRate(1, 1)\n            self._calc_scroll_pos = self._calc_scroll_pos_vscroll\n        self.step = step\n        self.Bind(wx.EVT_MOUSEWHEEL, self._on_mousewheel)\n\n    def _on_mousewheel(self, event):\n        x, y = self.GetViewStart()\n        delta = event.GetWheelRotation() / event.GetWheelDelta()\n        self.Scroll(*self._calc_scroll_pos(x, y, delta))\n\n    def _calc_scroll_pos_hscroll(self, x, y, delta):\n        return (x+delta*self.step, y)\n\n    def _calc_scroll_pos_vscroll(self, x, y, delta):\n        return (x, y-delta*self.step)\n",
"type":"code"
}
],
"id":"225e4dd702e94d4cb56efeb4a13c8e03",
"type":"code"
},
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiVScroll(CompactScrolledWindow, RLGuiWxContainerMixin):\n\n    def __init__(self, wx_parent, *args):\n        CompactScrolledWindow.__init__(self, wx_parent, wx.VERTICAL)\n        RLGuiWxContainerMixin.__init__(self, *args)\n",
"type":"code"
}
],
"id":"af9eaf30478d4bd7a74611b4ccbecb97",
"type":"code"
}
],
"title":"Scroll"
},
{
"children":[],
"id":"7ea891b8ab854906b2b4cbeab03575e3",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class ToolbarButton(wx.BitmapButton, RLGuiWxMixin):\n\n    def __init__(self, wx_parent, *args):\n        wx.BitmapButton.__init__(self, wx_parent, style=wx.NO_BORDER)\n        RLGuiWxMixin.__init__(self, *args)\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._register_builtin(\"icon\", lambda value:\n            self.SetBitmap(wx.ArtProvider.GetBitmap(\n                {\n                    \"add\": wx.ART_ADD_BOOKMARK,\n                    \"back\": wx.ART_GO_BACK,\n                    \"forward\": wx.ART_GO_FORWARD,\n                    \"undo\": wx.ART_UNDO,\n                    \"redo\": wx.ART_REDO,\n                    \"quit\": wx.ART_QUIT,\n                    \"save\": wx.ART_FILE_SAVE,\n                    \"settings\": wx.ART_HELP_SETTINGS,\n                }.get(value, wx.ART_QUESTION),\n                wx.ART_BUTTON,\n                (24, 24)\n            ))\n        )\n        self._event_map[\"button\"] = [(wx.EVT_BUTTON, self._on_wx_button)]\n\n    def _on_wx_button(self, wx_event):\n        self.call_event_handler(\"button\", None)\n",
"type":"code"
}
],
"id":"a18b175c332a41bebdeb0acb6332dcbd",
"type":"code"
}
],
"title":"Toolbar button"
},
{
"children":[],
"id":"d4d5239b9cbf4d419e6eec9f99c9bbb8",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Button(wx.Button, RLGuiWxMixin):\n\n    def __init__(self, wx_parent, *args):\n        wx.Button.__init__(self, wx_parent)\n        RLGuiWxMixin.__init__(self, *args)\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._register_builtin(\"label\", self.SetLabel)\n        self._event_map[\"button\"] = [(wx.EVT_BUTTON, self._on_wx_button)]\n\n    def _on_wx_button(self, wx_event):\n        self.call_event_handler(\"button\", None)\n",
"type":"code"
}
],
"id":"65096aa58766494b8cc5ee7ad807cfe1",
"type":"code"
}
],
"title":"Button"
},
{
"children":[],
"id":"21cad2ea45404fc18b9f7f080fc6c509",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Slider(wx.Slider, RLGuiWxMixin):\n\n    def __init__(self, wx_parent, *args):\n        wx.Slider.__init__(self, wx_parent)\n        RLGuiWxMixin.__init__(self, *args)\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._register_builtin(\"min\", self.SetMin)\n        self._register_builtin(\"max\", self.SetMax)\n\n    def register_event_handler(self, name, fn):\n        RLGuiWxMixin.register_event_handler(self, name, fn)\n        if name == \"slider\":\n            self._bind_wx_event(wx.EVT_SLIDER, self._on_wx_slider)\n\n    def _on_wx_slider(self, wx_event):\n        self._call_event_handler(\"slider\", SliderEvent(self.Value))\n",
"type":"code"
}
],
"id":"697a875ffd764a32b2b96dfa3ff039a1",
"type":"code"
}
],
"title":"Slider"
}
],
"id":"bf2fd902b8794da3851327a2a97f4939",
"paragraphs":[],
"title":"Wrappers for native wxPython widgets"
},
{
"children":[],
"id":"c32443e9bbd44958830fbd62706e2f60",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class ExpandCollapse(wx.Panel, RLGuiWxMixin):\n\n    def __init__(self, wx_parent, *args):\n        wx.Panel.__init__(self, wx_parent)\n        RLGuiWxMixin.__init__(self, *args)\n        self.Bind(wx.EVT_PAINT, self._on_paint)\n\n    def _get_local_props(self):\n        return {\n            \"min_size\": (self.prop([\"size\"]), -1),\n        }\n\n    def _on_paint(self, event):\n        dc = wx.GCDC(wx.PaintDC(self))\n        render = wx.RendererNative.Get()\n        (w, h) = self.Size\n        render.DrawTreeItemButton(\n            self,\n            dc,\n            (\n                0,\n                (h-self.prop([\"size\"]))/2,\n                self.prop([\"size\"])-1,\n                self.prop([\"size\"])-1\n            ),\n            flags=0 if self.prop([\"collapsed\"]) else wx.CONTROL_EXPANDED\n        )\n",
"type":"code"
}
],
"id":"5efd03ca553c43f5a280ca40c6f9c0bb",
"type":"code"
}
],
"title":"Expand/Collapse"
},
{
"children":[],
"id":"427ca7e37015483fa5ef63e1dd5979d3",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Text(wx.StaticText, RLGuiWxMixin):\n\n    def __init__(self, wx_parent, *args):\n        wx.Panel.__init__(self, wx_parent)\n        RLGuiWxMixin.__init__(self, *args)\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._register_builtin(\"text\", self.SetLabel)\n        self._register_builtin(\"foreground\", self.SetForegroundColour)\n",
"type":"code"
}
],
"id":"f3d592134f1846c787df29b547b4de51",
"type":"code"
}
],
"title":"Text"
},
{
"children":[],
"id":"c93f45e47daa41b99164916b4092ec13",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def start_app(frame_cls, props):\n    @profile_sub(\"render\")\n    def update(props):\n        frame.update_props(props)\n    @profile(\"show frame\")\n    @profile_sub(\"show frame\")\n    def show_frame():\n        props.listen(lambda: update(props.get()))\n        frame = frame_cls(None, None, {}, props.get())\n        frame.Layout()\n        frame.Refresh()\n        frame.Show()\n        return frame\n    app = wx.App()\n    frame = show_frame()\n    app.MainLoop()\n",
"type":"code"
}
],
"id":"557c451273f74393955205d772d86649",
"type":"code"
}
],
"title":"Start app"
}
],
"id":"162a73f0d72c4e7ca8d3fe246670c6c5",
"paragraphs":[],
"title":"Backend wxPython"
}
],
"id":"f4c7873224fb4dfcbe73180d7afdfd72",
"paragraphs":[],
"title":"GUI language"
},
{
"children":[
{
"children":[],
"id":"9db84eb8d14a4112840116f6cc7e119f",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def load_json_from_file(path):\n    with open(path) as f:\n        return json.load(f)\n",
"type":"code"
}
],
"id":"a72a9cd9a686412380866288ba800032",
"type":"code"
}
],
"title":"JSON"
},
{
"children":[],
"id":"fd19abbb3955433fbd490771c1d81314",
"paragraphs":[
{
"fragments":[
{
"text":"Limitation: It is not possible to profile recursive functions.",
"type":"text"
}
],
"id":"625c841cff624d018c56ab1755f76889",
"type":"text"
},
{
"chunkpath":[
"globals"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"PROFILING_TIMES = defaultdict(list)\nPROFILING_ENABLED = os.environ.get(\"RLITERATE_PROFILE\", \"\") != \"\"\n",
"type":"code"
}
],
"id":"d10d275857934de1bcedb5a066d41483",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def profile_sub(text):\n    def wrap(fn):\n        def fn_with_timing(*args, **kwargs):\n            t1 = time.perf_counter()\n            value = fn(*args, **kwargs)\n            t2 = time.perf_counter()\n            PROFILING_TIMES[text].append(t2-t1)\n            return value\n        if PROFILING_ENABLED:\n            return fn_with_timing\n        else:\n            return fn\n    return wrap\n",
"type":"code"
}
],
"id":"e8ff463813034acc97cec36f0ed928eb",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def profile(text):\n    def wrap(fn):\n        def fn_with_cprofile(*args, **kwargs):\n            pr = cProfile.Profile()\n            pr.enable()\n            value = fn(*args, **kwargs)\n            pr.disable()\n            s = io.StringIO()\n            ps = pstats.Stats(pr, stream=s).sort_stats(\"tottime\")\n            ps.print_stats(10)\n            profile_print_summary(text, s.getvalue())\n            PROFILING_TIMES.clear()\n            return value\n        if PROFILING_ENABLED:\n            return fn_with_cprofile\n        else:\n            return fn\n    return wrap\n",
"type":"code"
}
],
"id":"a3d07fac2fe84e90988f1bfebd3d367a",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def profile_print_summary(text, cprofile_out):\n    text_width = 0\n    for name, times in PROFILING_TIMES.items():\n        text_width = max(text_width, len(f\"{name} ({len(times)})\"))\n    print(f\"=== {text} {'='*60}\")\n    print(f\"{textwrap.indent(cprofile_out.strip(), '    ')}\")\n    print(f\"--- {text} {'-'*60}\")\n    for name, times in PROFILING_TIMES.items():\n        time = sum(times)*1000\n        if time > 10:\n            color = \"\\033[31m\"\n        elif time > 5:\n            color = \"\\033[33m\"\n        else:\n            color = \"\\033[0m\"\n        print(\"    {}{} = {:.3f}ms{}\".format(\n            color,\n            f\"{name} ({len(times)})\".ljust(text_width),\n            time,\n            \"\\033[0m\"\n        ))\n",
"type":"code"
}
],
"id":"69597944ae7c47a0af03e03c2036091e",
"type":"code"
}
],
"title":"Profiling"
},
{
"children":[],
"id":"35ef5a963f054d02b14cf8ca245e8518",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def size(w, h):\n    return (w, h)\n",
"type":"code"
}
],
"id":"90df86522a67483095acdf98bf1c58a8",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Misc"
},
{
"children":[],
"id":"ececc958dff648909493062a2283a5ae",
"paragraphs":[
{
"chunkpath":[
"base base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Immutable(object):\n\n    def __init__(self, value):\n        self._listeners = []\n        self._value = value\n\n    def listen(self, listener, prefix=[]):\n        self._listeners.append((listener, prefix))\n\n    @profile_sub(\"get\")\n    def get(self, path=[]):\n        value = self._value\n        for part in path:\n            value = value[part]\n        return value\n\n    def replace(self, path, value):\n        self.modify_many(\n            [(path, lambda old_value: value)],\n            only_if_differs=True\n        )\n\n    def modify(self, path, fn):\n        self.modify_many([(path, fn)])\n\n    def modify_many(self, *args, **kwargs):\n        self._notify(self._modify(*args, **kwargs))\n\n    @profile_sub(\"im_modify\")\n    def _modify(self, items, only_if_differs=False):\n        changed_paths = []\n        for path, fn in items:\n            if only_if_differs:\n                subvalue = self.get(path)\n                new_subvalue = fn(subvalue)\n                if new_subvalue != subvalue:\n                    self._value = im_modify(\n                        self._value,\n                        path,\n                        lambda old: new_subvalue\n                    )\n                    changed_paths.append(path)\n            else:\n                self._value = im_modify(\n                    self._value,\n                    path,\n                    fn\n                )\n                changed_paths.append(path)\n        return changed_paths\n\n    def _notify(self, changed_paths):\n        listeners = []\n        for changed_path in changed_paths:\n            for listener, prefix in self._listeners:\n                if ((len(changed_path) < len(prefix) and\n                    changed_path == prefix[:len(changed_path)]) or\n                    changed_path[:len(prefix)] == prefix):\n                    if listener not in listeners:\n                        listeners.append(listener)\n        for listener in listeners:\n            listener()\n",
"type":"code"
}
],
"id":"3a72a7fbda6a4099864ce0d1ac7ac146",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def im_modify(obj, path, modify_fn):\n    if path:\n        if isinstance(obj, list):\n            new_obj = list(obj)\n        elif isinstance(obj, dict):\n            new_obj = dict(obj)\n        else:\n            raise ValueError(\"unknown type\")\n        new_obj[path[0]] = im_modify(new_obj[path[0]], path[1:], modify_fn)\n        return new_obj\n    return modify_fn(obj)\n",
"type":"code"
}
],
"id":"95dd623524c84e72a68d55645dc7dbca",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"test cases"
],
"filepath":[
"test_rliterate2.py"
],
"fragments":[
{
"text":"def test_notification():\n    listeners = Mock()\n    immutable = rliterate2.Immutable({\n        \"foo\": 1,\n        \"bar\": {\n            \"foobar\": 2,\n        },\n    })\n    immutable.listen(listeners.foo, [\"foo\"])\n    immutable.listen(listeners.bar, [\"bar\"])\n    immutable.listen(listeners.foobar, [\"bar\", \"foobar\"])\n\n    listeners.reset_mock()\n    immutable.replace([\"foo\"], 2)\n    assert listeners.mock_calls == [\n        call.foo(),\n    ]\n\n    listeners.reset_mock()\n    immutable.replace([\"bar\", \"foobar\"], 3)\n    assert listeners.mock_calls == [\n        call.bar(),\n        call.foobar(),\n    ]\n\n    listeners.reset_mock()\n    immutable.replace([\"bar\"], {\"foobar\", 3})\n    assert listeners.mock_calls == [\n        call.bar(),\n        call.foobar(),\n    ]\n",
"type":"code"
}
],
"id":"57eaf7932f074f50a010cbb77f7dd8a4",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Immutable"
}
],
"id":"f0ec3620177047238aaecb5777a789db",
"paragraphs":[
{
"fragments":[
{
"text":"Utilities that could have been in the Python standard library.",
"type":"text"
}
],
"id":"6d9f9932e8324969a7188486c5a07773",
"type":"text"
}
],
"title":"Utilities"
},
{
"children":[
{
"children":[],
"id":"e7933f62b6c244fbbed916e00d06d1c6",
"paragraphs":[
{
"fragments":[
{
"text":"Proof of concept of new ",
"type":"text"
},
{
"text":"React",
"type":"link",
"url":"https://reactjs.org/"
},
{
"text":"-like GUI architecture. Can resize table of contents by dragging.",
"type":"text"
}
],
"id":"9d1bd3bfd8fb457ab8819277ba4eda9c",
"type":"text"
},
{
"fragments":[
{
"text":"Resizing table of contents.",
"type":"text"
}
],
"id":"61cfd2e787ff458a93a92fed798169c7",
"image_base64":"",
"type":"image"
}
],
"title":"V1 October 2019"
},
{
"children":[],
"id":"7e3461f1f12642af80ba94d79323267c",
"paragraphs":[
{
"fragments":[
{
"text":"Figure out how the document should interact with the GUI architecture. Do it by populating table of contents.",
"type":"text"
}
],
"id":"602d74d92d9e4a8782be0652ea4b41aa",
"type":"text"
},
{
"fragments":[
{
"text":"First attempt at rendering table of contents.",
"type":"text"
}
],
"id":"e71d71e98c87432182b862d4d427bfcd",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"Fleshing out structure.",
"type":"text"
}
],
"id":"9a40b10a780d4394966fb3497bb8a3e9",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"Proper styling.",
"type":"text"
}
],
"id":"0e0e37dc38b341979bb7dbe1a08fd326",
"image_base64":"",
"type":"image"
}
],
"title":"V2 October 2019-"
}
],
"id":"359aefc7fbb54cb4b8e43182efb241a0",
"paragraphs":[],
"title":"History"
},
{
"children":[],
"id":"6d92bc9005724ecdad6856ba67ec2121",
"paragraphs":[
{
"fragments":[
{
"text":"Figure out rendering order of files automatically so that ",
"type":"text"
},
{
"text":"rlgui.py",
"type":"code"
},
{
"text":" is rendered before ",
"type":"text"
},
{
"text":"rliterate2.py",
"type":"code"
},
{
"text":" since the later depends on the former.",
"type":"text"
}
],
"id":"55d932b234e04a0bb53737495d812b5d",
"type":"text"
}
],
"title":"Ideas for new features"
}
],
"id":"46533f3be0674d1cae08ff281edbc37d",
"paragraphs":[
{
"fragments":[
{
"text":"This is a rewrite of RLiterate with the following goals:",
"type":"text"
}
],
"id":"313389d1d33342909fe864a0717a0cd0",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Improve performance so that it is not annoying to use.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Fix bugs that make it annoying to use.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Clean up the code base and remove old cruft.",
"type":"text"
}
]
}
],
"id":"20fd19faf32a4577bdc992cfe7be4256",
"type":"list"
}
],
"title":"RLiterate 2"
},
"variables":{
"7f02baf9597a44618c7942768716bba3":"OnDataDropped",
"d1440232958142d18f9a52920dabf4b1":"FindClosestDropPoint"
}
}