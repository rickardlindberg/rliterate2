{
"root_page":{
"children":[
{
"children":[],
"id":"165a1189e30f4ce5b22001ea8091aa9c",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"#!/usr/bin/env python3\n\nfrom collections import namedtuple, defaultdict\nimport contextlib\nimport json\nimport os\nimport sys\nimport time\nimport uuid\nimport wx\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"globals"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"functions"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"base base classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"base classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    main()\n",
"type":"code"
}
],
"id":"264da9dfb5c04b259a001f47538827a8",
"type":"code"
}
],
"title":"File"
},
{
"children":[],
"id":"48f01b615cea4ab8a229f1cb1c9b89a3",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def usage(script):\n    sys.exit(f\"usage: {script} <path>\")\n",
"type":"code"
}
],
"id":"665fd0f19f4f409eab4aa210dd7e61d2",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def parse_args():\n    args = {\n        \"path\": None,\n    }\n    script = sys.argv[0]\n    rest = sys.argv[1:]\n    if len(rest) != 1:\n        usage(script)\n    args[\"path\"] = rest[0]\n    return args\n",
"type":"code"
}
],
"id":"72a74e2e05dd46639122742c7832a0c1",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def main():\n    args = parse_args()\n    start_app(\n        MainFrame,\n        MainFrameProps(args[\"path\"])\n    )\n",
"type":"code"
}
],
"id":"9e71e85a89e143fe86cb4b90a5eed8a7",
"type":"code"
}
],
"title":"Main"
},
{
"children":[
{
"children":[],
"id":"21c17f5017644b69b2698822a4ce524e",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"frame MainFrame %layout_rows {\n  Toolbar(\n    #toolbar\n    %align[EXPAND]\n  )\n  RowDivider(\n    #toolbar_divider\n    %align[EXPAND]\n  )\n  MainArea(\n    #main_area\n    %align[EXPAND]\n    %proportion[1]\n  )\n}\n",
"type":"code"
}
],
"id":"7501efbaaca640c9aaf8e66a7309ad74",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class MainFrameProps(Props):\n\n    def __init__(self, path):\n        Props.__init__(self, {\n            \"title\": \"{} ({}) - RLiterate 2\".format(\n                os.path.basename(path),\n                os.path.abspath(os.path.dirname(path))\n            ),\n            \"toolbar_divider\": {\n                \"thickness\": 2,\n                \"color\": \"#aaaaaf\",\n            },\n        })\n        self._child(\"toolbar\", ToolbarProps())\n        self._child(\"main_area\", MainAreaProps(Document(path)))\n",
"type":"code"
}
],
"id":"817bfdde2cd042328c69a297120bdf9d",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel MainArea %layout_columns {\n  TableOfContents(\n    #toc\n    %align[EXPAND]\n  )\n  ColumnDivider(\n    #toc_divider\n    cursor = \"size_horizontal\"\n    @drag  = self._on_toc_divider_drag(event)\n    %align[EXPAND]\n  )\n  Workspace(\n    #workspace\n    %align[EXPAND]\n    %proportion[1]\n  )\n}\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"MainArea"
],
"prefix":"",
"type":"chunk"
}
],
"id":"a8e40ef2da854034b55c8c7a3097e3ba",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes",
"MainArea"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def _on_toc_divider_drag(self, event):\n    if event.initial:\n        self._start_width = self.prop(\"toc.width\")\n    else:\n        self.prop(\"toc.set_width\")(self._start_width+event.dx)\n",
"type":"code"
}
],
"id":"72cfc592c2ea47e499de1164ed087bdb",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class MainAreaProps(Props):\n\n    def __init__(self, document):\n        Props.__init__(self, {\n            \"toc_divider\": {\n                \"thickness\": 3,\n                \"color\": \"#aaaaff\",\n            },\n        })\n        self._child(\"toc\", TableOfContentsProps(document))\n        self._child(\"workspace\", WorkspaceProps())\n",
"type":"code"
}
],
"id":"5d9b7a83066349ac9d47a1e72e4b561d",
"type":"code"
}
],
"title":"Main frame"
},
{
"children":[],
"id":"a52749c4dac1446ba6877e63f59b00d3",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel Toolbar %layout_columns {\n  %space[#margin]\n  ToolbarButton(\n    icon = \"quit\"\n    %margin[#margin,TOP|BOTTOM]\n  )\n  %space[#margin]\n}\n",
"type":"code"
}
],
"id":"7d87330167694a41a0222b278aeb5aa5",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class ToolbarProps(Props):\n\n    def __init__(self):\n        Props.__init__(self, {\n            \"margin\": 4,\n        })\n",
"type":"code"
}
],
"id":"a2b6e1e17d804033bc21ab32625b15a9",
"type":"code"
}
],
"title":"Toolbar"
},
{
"children":[],
"id":"1f79ba6407164d8dbcc3f2e90f409093",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"vscroll TableOfContents %layout_rows {\n  min_size = size(#width -1)\n  loop (#rows) {\n    TableOfContentsRow($)\n  }\n}\n",
"type":"code"
}
],
"id":"e0db56dacc9f4aa3b223033b6feee2f2",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class TableOfContentsProps(Props):\n\n    def __init__(self, document):\n        self._document = document\n        self._document.listen(lambda: self._replace(\"rows\", self._generate_rows()))\n        Props.__init__(self, {\n            \"background\": \"#ffeeff\",\n            \"width\": 230,\n            \"set_width\": self._set_width,\n            \"rows\": self._generate_rows(),\n        })\n\n    def _set_width(self, value):\n        self._replace(\"width\", max(50, value))\n\n    def _generate_rows(self):\n        def inner(rows, page, level=0):\n            rows.append({\"indent\": level*16, \"title\": page[\"title\"]})\n            for child in page[\"children\"]:\n                inner(rows, child, level+1)\n        rows = []\n        inner(rows, self._document.get_page())\n        return rows\n",
"type":"code"
}
],
"id":"2a866818635048c794a1a4be3e35509d",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel TableOfContentsRow %layout_columns {\n  %space[#indent]\n  Button(label=#title)\n}\n",
"type":"code"
}
],
"id":"e70e2005249e4fa29780c11f6dd1bb4c",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
}
],
"title":"Table of contents"
},
{
"children":[],
"id":"e6a157bbac8842a2b8c625bfa9255159",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel Workspace %layout_columns {\n}\n",
"type":"code"
}
],
"id":"3e408b8af8bf432f9db783f07ea161d8",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class WorkspaceProps(Props):\n\n    def __init__(self):\n        Props.__init__(self, {\n        })\n",
"type":"code"
}
],
"id":"1bd7139b569d41039b4661e345deb68d",
"type":"code"
}
],
"title":"Workspace"
},
{
"children":[],
"id":"b022c98477a04ed2a492e75f63e75796",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel RowDivider %layout_columns {\n  background = #color\n  min_size   = size(-1 #thickness)\n}\n",
"type":"code"
}
],
"id":"6b9bbfc9a6cd4bb88cea712ebb9909dd",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel ColumnDivider %layout_rows {\n  background = #color\n  min_size   = size(#thickness -1)\n}\n",
"type":"code"
}
],
"id":"5c17f50053b24b4cadb41b3de44a038a",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
}
],
"title":"Dividers"
}
],
"id":"d625649aae0a40bcb3e2e8cc9ede4373",
"paragraphs":[],
"title":"GUI"
},
{
"children":[],
"id":"27c8072213a94090a6d0d5e1362ab3ed",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Document(Observable):\n\n    def __init__(self, path):\n        Observable.__init__(self)\n        self._path = path\n        self._doc = load_json_from_file(path)\n\n    def get_page(self):\n        return self._doc[\"root_page\"]\n",
"type":"code"
}
],
"id":"fb0708b0726240f18415dd1e63cff22d",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def load_document_from_file(path):\n    if os.path.exists(path):\n        return load_json_from_file(path)\n    else:\n        return create_new_document()\n",
"type":"code"
}
],
"id":"7f67cb9003a14964a74bf495a8cce6f8",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def create_new_document():\n    return {\n        \"root_page\": create_new_page(),\n        \"variables\": {},\n    }\n",
"type":"code"
}
],
"id":"1c35c112ce9f41659a6a6c8a4062f564",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def create_new_page():\n    return {\n        \"id\": genid(),\n        \"title\": \"New page...\",\n        \"children\": [],\n        \"paragraphs\": [],\n    }\n",
"type":"code"
}
],
"id":"62b40e83cdde43209245d76e123bdb5a",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def genid():\n    return uuid.uuid4().hex\n",
"type":"code"
}
],
"id":"e6bca528d2f94219b720e92cd5ddf925",
"type":"code"
}
],
"title":"Document"
},
{
"children":[
{
"children":[],
"id":"fa9c9667abb14d34b60ec36cc4188b99",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"#!/usr/bin/env python2\n\nfrom collections import defaultdict\nimport sys\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"rlmeta support library"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"grammars"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"support functions"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    parser = GuiParser()\n    codegenerator = WxCodeGenerator()\n    try:\n        sys.stdout.write(\n            codegenerator.run(\"ast\", parser.run(\"widget\", sys.stdin.read()))\n        )\n    except _MatchError as e:\n        sys.exit(e.describe())\n",
"type":"code"
}
],
"id":"e8901611eb4941229bd35edab5f6e8b7",
"type":"code"
},
{
"chunkpath":[
"rlmeta support library"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"# Placeholder to generate RLMeta support library\n",
"type":"code"
}
],
"id":"7f08cdb6050944b98378a4b4106105d9",
"language":"",
"post_process":[
"python",
"rlmeta/rlmeta.py",
"--support"
],
"type":"code"
}
],
"title":"Compiler"
},
{
"children":[
{
"children":[],
"id":"35d081d36a7546bbb2c4785312fb3a12",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiMixin(object):\n\n    def __init__(self, props):\n        self._props = {}\n        self._builtin_props = {}\n        self._event_handlers = {}\n        self._setup_gui()\n        self.update_props(props, parent_updated=True)\n\n    def register_event_handler(self, name, fn):\n        self._event_handlers[name] = profile_reset()(profile(f\"on_{name}\")(fn))\n\n    def _call_event_handler(self, name, *args, **kwargs):\n        if name in self._event_handlers:\n            self._event_handlers[name](*args, **kwargs)\n\n    def _setup_gui(self):\n        pass\n\n    def prop(self, path):\n        value = self._props\n        for part in path.split(\".\"):\n            value = value[part]\n        return value\n\n    def update_props(self, props, parent_updated=False):\n        if self._update_props(props):\n            self._update_gui(parent_updated)\n\n    def _update_props(self, props):\n        self._changed_props = []\n        for p in [lambda: props, self._get_local_props]:\n            for key, value in p().items():\n                if self._prop_differs(key, value):\n                    self._props[key] = value\n                    self._changed_props.append(key)\n        return len(self._changed_props) > 0\n\n    def _get_local_props(self):\n        return {}\n\n    def _prop_differs(self, key, value):\n        if key not in self._props:\n            return True\n        if self._props[key] is value:\n            return False\n        if self._props[key] == value:\n            return False\n        return True\n\n    def _update_gui(self, parent_updated):\n        for name in self._changed_props:\n            if name in self._builtin_props:\n                self._builtin_props[name](self._props[name])\n\n    def _register_builtin(self, name, fn):\n        self._builtin_props[name] = fn\n",
"type":"code"
}
],
"id":"a0987644a69445dea88e612f31f16eba",
"type":"code"
},
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"DragEvent = namedtuple(\"DragEvent\", \"initial,dx\")\n",
"type":"code"
}
],
"id":"c271e666cf75407b9f4d10b0860cbae8",
"type":"code"
}
],
"title":"Base widget mixin"
},
{
"children":[],
"id":"08bc729869634744b018f65f4d968a49",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Props(Observable):\n\n    def __init__(self, props):\n        Observable.__init__(self)\n        self._props = props\n\n    def _child(self, name, props):\n        self._props[name] = props.get()\n        props.listen(lambda: self._replace_no_check(name, props.get()))\n\n    @profile(\"get\")\n    def get(self):\n        return self._props\n\n    def _replace(self, key, value):\n        if self._replace_if_needed(key, value):\n            self._notify()\n\n    @profile(\"modify\")\n    def _replace_if_needed(self, key, value):\n        if self._props[key] != value:\n            self._modify(key, value)\n            return True\n        return False\n\n    def _replace_no_check(self, key, value):\n        self._modify(key, value)\n        self._notify()\n\n    @profile(\"modify\")\n    def _modify(self, key, value):\n        self._props = im_modify(self._props, [key], lambda old: value)\n",
"type":"code"
}
],
"id":"c46f943de6a340e286c6c6eefe9b61a2",
"type":"code"
}
],
"title":"Props"
}
],
"id":"da31b318d9f2479496494b3e56985a07",
"paragraphs":[],
"title":"Support library"
},
{
"children":[
{
"children":[],
"id":"05f21609be344a7396ee38ae3c05e278",
"paragraphs":[
{
"chunkpath":[
"grammars"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"GuiParser {\n  widget ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    container:container WS NAME:name layout:layout\n    WS '{' widgetBody:body WS '}' ' '* '\\n'? .*:verbatim -> [\n      \"widget\"\n      name\n      container\n      layout\n      extract(body \"prop\")\n      extract(body \"instance\")\n      join(verbatim)\n    ]\n  container ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    WS (\n      | 'frame'\n      | 'panel'\n      | 'vscroll'\n    ):x WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"container\" x]\n  layout ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    WS (\n      | '%layout_rows'\n      | '%layout_columns'\n    ):x WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layout\" x]\n  widgetBody ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    (\n      | instance\n      | prop\n    )*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> partition(xs)\n  instance ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS 'loop' WS '(' expr:x WS ')'\n      WS '{' instanceLoop*:xs WS '}' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" \"%loop\" x ~xs]\n    | instanceLoop\n  instanceLoop ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS '%space' WB WS '[' expr:x WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" \"%space\" x]\n    | WS NAME:x '(' instanceBody*:xs WS ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" x xs]\n  instanceBody ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | layoutAttribute\n    | loopvarExplode\n    | propExplode\n    | propAssign\n    | handler\n  layoutAttribute ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS '%proportion[' number:x WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layoutAttribute\" \"proportion\" x]\n    | WS '%align[' WS 'EXPAND' WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layoutAttribute\" \"align\" \"expand\"]\n    | WS '%margin[' expr:x ',' margins:y WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layoutAttribute\" \"margin\" x ~y]\n  margins ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= margin:x ('|' margin)*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [x ~xs]\n  margin ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= (\n    | 'TOP'\n    | 'BOTTOM'\n  ):x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"marginSide\" x]\n  propExplode ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS PropChain:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propExplode\" x]\n  propAssign ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NAME:x WS '=' expr:y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propAssign\" x y]\n  handler ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS '@' NAME:x WS '=' expr:y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"handler\" x y]\n  expr ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= expr1:x ('.' expr1)*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"chain\" x ~xs]\n  expr1 ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= (string | call | number | propRef | identifier | loopvarRef)\n  string ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS STRING:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"string\" x]\n  call ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    (identifier|propRef):x '(' expr*:xs WS ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"call\" x ~xs]\n  number ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NUMBER:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"number\" x]\n  propRef ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS PropChain:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propRef\" x]\n  identifier ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NAME:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"identifier\" x]\n  loopvarRef ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= '$' NAME:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"loopvarRef\" x]\n  loopvarExplode ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= '$' (NAME | -> \"\"):x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"loopvarExplode\" x]\n  prop ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NAME:x WS '=' expr:y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"prop\" x y]\n  PropChain ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= '#' NAME:x ('.' NAME)*:xs WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> join([x ~xs] \".\")\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"GuiParser"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"d69da27c0c3046f08ad2347433cdaaf3",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
},
{
"chunkpath":[
"grammars",
"GuiParser"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"NUMBER ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= ('-' | -> \"\"):x DIGIT:y DIGIT*:ys ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> int(join([x y ~ys]))\nDIGIT ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= '0'-'9'\nNAME ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= NAMESTART:x NAMECHAR*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> join([x ~xs])\nNAMESTART ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z' | '_'\nNAMECHAR ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= NAMESTART | '0'-'9'\nSTRING ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= '\"' (!'\"' .)*:xs '\"' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> join(xs)\nWS ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= (' ' | '\\n')*\nWB ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= !NAMECHAR\n",
"type":"code"
}
],
"id":"bd877f114acc489a93f3088e4fd98358",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
},
{
"chunkpath":[
"support functions"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def join(items, sep=\"\"):\n    return sep.join(items)\n",
"type":"code"
}
],
"id":"b762d2f9dacf44c0914eadb32ef5d1fc",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"support functions"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def partition(values):\n    by_type = defaultdict(list)\n    for x in values:\n        by_type[x[0]].append(x)\n    return by_type\n",
"type":"code"
}
],
"id":"cdbf7f0cd1754a718c370450a4f01496",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"support functions"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def extract(by_type, name):\n    return by_type[name]\n",
"type":"code"
}
],
"id":"5e88fc430da84fc1a21ffe6afa2b4e44",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Parser"
},
{
"children":[],
"id":"347b1111a1a54adb8bde870d06cbf49e",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"rlgui_lexer",
"__init__.py"
],
"fragments":[
{
"text":"from pygments.lexer import RegexLexer\nfrom pygments.token import *\n\nclass RLGuiLexer(RegexLexer):\n\n    name = 'RLGui'\n    aliases = ['rlgui']\n    filenames = ['*.rlgui']\n\n    tokens = {\n        'root': [\n            (r'\"', String, \"string\"),\n            (r'[=]', Name.Builtin),\n            (r'\\b(vscroll|frame|panel|loop)\\b', Keyword),\n            (r'#\\w+([.]\\w+)*', Name.Class),\n            (r'[$]\\w*', Name.Builtin),\n            (r'@\\w+', Name.Exception),\n            (r'%\\w+', Comment),\n            (r'.', Text),\n        ],\n        'string': [\n            (r'[^\"\\\\]+', String),\n            (r'\"', String, \"#pop\"),\n        ],\n    }\n\n",
"type":"code"
}
],
"id":"e3b741de46484d63b5de7ea5d0479290",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"setup.py"
],
"fragments":[
{
"text":"from setuptools import setup\n\nsetup(\n    name='rlgui_lexer',\n    version='0.1',\n    packages=['rlgui_lexer'],\n    entry_points={\n        'pygments.lexers': ['rlgui_lexer=rlgui_lexer:RLGuiLexer'],\n    },\n    zip_safe=False,\n)\n",
"type":"code"
}
],
"id":"16592d2a3f3640eca209a07274bbcaba",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"install.sh"
],
"fragments":[
{
"text":"#!/bin/sh\n\nset -e\n\npip install --upgrade --user .\n",
"type":"code"
}
],
"id":"31514c5ac3f64c978ecdbf9cdc36711a",
"type":"code"
}
],
"title":"Pygments plugin"
}
],
"id":"26afd5121ebb4f6eafe5ccb1e934ffd3",
"paragraphs":[],
"title":"Front end"
},
{
"children":[
{
"children":[],
"id":"7c7bfc3d69a0434ab62157bd6f274209",
"paragraphs":[
{
"chunkpath":[
"grammars"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"WxCodeGenerator {\n  ast = [%:x] -> x\n  astItems =\n    | ast:x astItem*:xs -> { x xs }\n    |                   -> {}\n  astItem = ast:x -> { \", \" x }\n  widget = .:name ast:container ast:sizer [ast*:props] [ast*:inst] .:verbatim -> {\n    \"class \" name \"(\" container \"):\\n\\n\" >\n      \"def _get_local_props(self):\\n\" >\n        \"return {\\n\" >\n          props\n        < \"}\\n\\n\"\n      <\n      \"def _create_sizer(self):\\n\" >\n        \"return \" sizer \"\\n\\n\"\n      <\n      \"def _create_widgets(self):\\n\" >\n        \"pass\\n\"\n        inst\n      <\n      verbatim\n    <\n  }\n  instance =\n    | \"%space\" ast:x -> {\n      \"self._create_space(\" x \")\\n\"\n    }\n    | .:name [ast*:xs] -> {\n      \"props = {}\\n\"\n      \"sizer = {\\\"flag\\\": 0, \\\"border\\\": 0, \\\"proportion\\\": 0}\\n\"\n      \"handlers = {}\\n\"\n      xs\n      \"self._create_widget(\" name \", props, sizer, handlers)\\n\"\n    }\n    | \"%loop\" ast:x ast*:ys -> {\n      \"with self._loop():\\n\" >\n        \"for loopvar in \" x \":\\n\" >\n          \"pass\\n\"\n          ys\n        <\n      <\n    }\n  layoutAttribute =\n    | \"proportion\" ast:x      -> { \"sizer[\\\"proportion\\\"] = \" x \"\\n\" }\n    | \"align\" \"expand\"        -> { \"sizer[\\\"flag\\\"] |= wx.EXPAND\\n\" }\n    | \"margin\" ast:x ast*:ys  -> { \"sizer[\\\"border\\\"] = \" x \"\\n\" ys }\n  marginSide =\n    | \"TOP\"    -> \"sizer[\\\"flag\\\"] |= wx.TOP\\n\"\n    | \"BOTTOM\" -> \"sizer[\\\"flag\\\"] |= wx.BOTTOM\\n\"\n  prop = py:name ast:default -> {\n    name \": \" default \",\\n\"\n  }\n  chain = ast:x chainAst*:xs -> { x xs }\n  chainAst = ast:x -> { \".\" x }\n  propRef = py:name -> { \"self.prop(\" name \")\" }\n  propAssign = py:name ast:value -> { \"props[\" name \"] = \" value \"\\n\" }\n  propExplode = py:name -> { \"props.update(self.prop(\" name \"))\\n\" }\n  loopvarRef = py:name -> { \"loopvar[\" name \"]\" }\n  loopvarExplode =\n    | \"\"      -> { \"props.update(loopvar)\\n\" }\n    | py:name -> { \"props.update(loopvar[\" name \"])\\n\" }\n  call = ast:x astItems:y -> { x \"(\" y \")\" }\n  handler = py:name ast:y -> { \"handlers[\" name \"] = lambda event: \" y \"\\n\" }\n  layout =\n    | \"%layout_rows\"    -> \"wx.BoxSizer(wx.VERTICAL)\"\n    | \"%layout_columns\" -> \"wx.BoxSizer(wx.HORIZONTAL)\"\n  container =\n    | \"frame\"   -> \"RLGuiFrame\"\n    | \"panel\"   -> \"RLGuiPanel\"\n    | \"vscroll\" -> \"RLGuiVScroll\"\n  string = py\n  number = py\n  identifier = .\n  py = .:x -> repr(x)\n}\n",
"type":"code"
}
],
"id":"68d4bdf87385458bbeda3cad93d14212",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
}
],
"title":"Code generator"
},
{
"children":[],
"id":"bb0987a3daff494cbaf93e74841f88a9",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiWxMixin(RLGuiMixin):\n\n    def _setup_gui(self):\n        RLGuiMixin._setup_gui(self)\n        self._setup_wx_events()\n        self._register_builtin(\"background\", self.SetBackgroundColour)\n        self._register_builtin(\"min_size\", self.SetMinSize)\n        self._register_builtin(\"cursor\", lambda value:\n            self.SetCursor({\n                \"size_horizontal\": wx.Cursor(wx.CURSOR_SIZEWE),\n            }.get(value, wx.Cursor(wx.CURSOR_QUESTION_ARROW)))\n        )\n\n    def _setup_wx_events(self):\n        self._wx_event_handlers = set()\n        self._wx_down_pos = None\n\n    def register_event_handler(self, name, fn):\n        RLGuiMixin.register_event_handler(self, name, fn)\n        if name == \"drag\":\n            self._bind_wx_event(wx.EVT_LEFT_DOWN, self._on_wx_left_down)\n            self._bind_wx_event(wx.EVT_LEFT_UP, self._on_wx_left_up)\n            self._bind_wx_event(wx.EVT_MOTION, self._on_wx_motion)\n\n    def _bind_wx_event(self, event, handler):\n        if event not in self._wx_event_handlers:\n            self._wx_event_handlers.add(event)\n            self.Bind(event, handler)\n\n    def _on_wx_left_down(self, wx_event):\n        self._wx_down_pos = self.ClientToScreen(wx_event.Position)\n        self._call_event_handler(\"drag\", DragEvent(True, 0))\n\n    def _on_wx_left_up(self, wx_event):\n        self._wx_down_pos = None\n\n    def _on_wx_motion(self, wx_event):\n        if self._wx_down_pos is not None:\n            new_pos = self.ClientToScreen(wx_event.Position)\n            self._call_event_handler(\"drag\", DragEvent(False, new_pos.x-self._wx_down_pos.x))\n",
"type":"code"
}
],
"id":"b1beaccda0d04dd28ece317b5f5d8c55",
"type":"code"
}
],
"title":"Base wxPython mixin"
},
{
"children":[],
"id":"70714ee9823a41518a42251ffb370b01",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiWxContainerMixin(RLGuiWxMixin):\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._setup_layout()\n        self._children = []\n        self._inside_loop = False\n\n    def _setup_layout(self):\n        self.Sizer = self._sizer = self._create_sizer()\n        self._parent = self\n\n    def _update_gui(self, parent_updated):\n        RLGuiWxMixin._update_gui(self, parent_updated)\n        self._sizer_index = 0\n        self._child_index = 0\n        self._create_widgets()\n        if not parent_updated:\n            self._layout()\n\n    @profile(\"layout\")\n    def _layout(self):\n        self.Layout()\n        self.Refresh()\n\n    def _create_widgets(self):\n        raise NotImplementedError()\n\n    @contextlib.contextmanager\n    def _loop(self):\n        self._inside_loop = True\n        if self._child_index >= len(self._children):\n            self._children.append([])\n        old_children = self._children\n        next_index = self._child_index + 1\n        self._children = self._children[self._child_index]\n        self._child_index = 0\n        try:\n            yield\n        finally:\n            while self._child_index < len(self._children):\n                self._children.pop(-1)[0].Destroy()\n            self._children = old_children\n            self._child_index = next_index\n            self._inside_loop = False\n\n    def _create_widget(self, widget_cls, props, sizer, handlers):\n        if self._child_index >= len(self._children):\n            widget = widget_cls(self._parent, props)\n            for name, fn in handlers.items():\n                widget.register_event_handler(name, fn)\n            sizer_item = self._sizer.Insert(self._sizer_index, widget, **sizer)\n            self._children.insert(self._child_index, (widget, sizer_item))\n        else:\n            widget, sizer_item = self._children[self._child_index]\n            widget.update_props(props, parent_updated=True)\n            sizer_item.SetBorder(sizer[\"border\"])\n            sizer_item.SetProportion(sizer[\"proportion\"])\n        self._sizer_index += 1\n        self._child_index += 1\n\n    def _create_space(self, thickness):\n        if self._child_index >= len(self._children):\n            self._children.insert(self._child_index, self._sizer.Insert(\n                self._sizer_index,\n                self._get_space_size(thickness)\n            ))\n        else:\n            self._children[self._child_index].SetMinSize(\n                self._get_space_size(thickness)\n            )\n        self._sizer_index += 1\n        self._child_index += 1\n\n    def _get_space_size(self, size):\n        if self._sizer.Orientation == wx.HORIZONTAL:\n            return (size, 1)\n        else:\n            return (1, size)\n",
"type":"code"
}
],
"id":"e09eeec305864f0e9a791b0e287def75",
"type":"code"
}
],
"title":"Container mixin"
},
{
"children":[
{
"children":[],
"id":"94401a3af3024aefa6e4bc11605b9ce1",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiFrame(wx.Frame, RLGuiWxContainerMixin):\n\n    def __init__(self, parent, props):\n        wx.Frame.__init__(self, parent)\n        RLGuiWxContainerMixin.__init__(self, props)\n\n    def _setup_gui(self):\n        RLGuiWxContainerMixin._setup_gui(self)\n        self._register_builtin(\"title\", self.SetTitle)\n\n    def _setup_layout(self):\n        self._parent = wx.Panel(self)\n        self._parent.Sizer = self._sizer = self._create_sizer()\n        self.Sizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.Sizer.Add(self._parent, flag=wx.EXPAND, proportion=1)\n",
"type":"code"
}
],
"id":"1f2d77d65d6345b884d7755a1e963332",
"type":"code"
}
],
"title":"Frame"
},
{
"children":[],
"id":"65b8f97d115941a586dde12c4d78f93c",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiPanel(wx.Panel, RLGuiWxContainerMixin):\n\n    def __init__(self, parent, props):\n        wx.Panel.__init__(self, parent)\n        RLGuiWxContainerMixin.__init__(self, props)\n",
"type":"code"
}
],
"id":"c16e05ddb3ef4549ad64ffc3f46a411a",
"type":"code"
}
],
"title":"Panel"
},
{
"children":[],
"id":"6934ccab15d043f687656bff6bffc019",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class CompactScrolledWindow(wx.ScrolledWindow):\n\n    MIN_WIDTH = 200\n    MIN_HEIGHT = 200\n\n    def __init__(self, parent, style=0, size=wx.DefaultSize, step=100):\n        w, h = size\n        size = (max(w, self.MIN_WIDTH), max(h, self.MIN_HEIGHT))\n        wx.ScrolledWindow.__init__(self, parent, style=style, size=size)\n        self.Size = size\n        if style == wx.HSCROLL:\n            self.SetScrollRate(1, 0)\n            self._calc_scroll_pos = self._calc_scroll_pos_hscroll\n        elif style == wx.VSCROLL:\n            self.SetScrollRate(0, 1)\n            self._calc_scroll_pos = self._calc_scroll_pos_vscroll\n        else:\n            self.SetScrollRate(1, 1)\n            self._calc_scroll_pos = self._calc_scroll_pos_vscroll\n        self.step = step\n        self.Bind(wx.EVT_MOUSEWHEEL, self._on_mousewheel)\n\n    def _on_mousewheel(self, event):\n        x, y = self.GetViewStart()\n        delta = event.GetWheelRotation() / event.GetWheelDelta()\n        self.Scroll(*self._calc_scroll_pos(x, y, delta))\n\n    def _calc_scroll_pos_hscroll(self, x, y, delta):\n        return (x+delta*self.step, y)\n\n    def _calc_scroll_pos_vscroll(self, x, y, delta):\n        return (x, y-delta*self.step)\n",
"type":"code"
}
],
"id":"225e4dd702e94d4cb56efeb4a13c8e03",
"type":"code"
},
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiVScroll(CompactScrolledWindow, RLGuiWxContainerMixin):\n\n    def __init__(self, parent, props):\n        CompactScrolledWindow.__init__(self, parent, wx.VERTICAL)\n        RLGuiWxContainerMixin.__init__(self, props)\n",
"type":"code"
}
],
"id":"af9eaf30478d4bd7a74611b4ccbecb97",
"type":"code"
}
],
"title":"Scroll"
},
{
"children":[],
"id":"7ea891b8ab854906b2b4cbeab03575e3",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class ToolbarButton(wx.BitmapButton, RLGuiWxMixin):\n\n    def __init__(self, parent, props):\n        wx.BitmapButton.__init__(self, parent, style=wx.NO_BORDER)\n        RLGuiWxMixin.__init__(self, props)\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._register_builtin(\"icon\", lambda value:\n            self.SetBitmap(wx.ArtProvider.GetBitmap(\n                {\n                    \"add\": wx.ART_ADD_BOOKMARK,\n                    \"back\": wx.ART_GO_BACK,\n                    \"forward\": wx.ART_GO_FORWARD,\n                    \"undo\": wx.ART_UNDO,\n                    \"redo\": wx.ART_REDO,\n                    \"quit\": wx.ART_QUIT,\n                    \"save\": wx.ART_FILE_SAVE,\n                }.get(value, wx.ART_QUESTION),\n                wx.ART_BUTTON,\n                (24, 24)\n            ))\n        )\n",
"type":"code"
}
],
"id":"a18b175c332a41bebdeb0acb6332dcbd",
"type":"code"
}
],
"title":"Toolbar button"
},
{
"children":[],
"id":"d4d5239b9cbf4d419e6eec9f99c9bbb8",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Button(wx.Button, RLGuiWxMixin):\n\n    def __init__(self, parent, props):\n        wx.Button.__init__(self, parent)\n        RLGuiWxMixin.__init__(self, props)\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._register_builtin(\"label\", self.SetLabel)\n",
"type":"code"
}
],
"id":"65096aa58766494b8cc5ee7ad807cfe1",
"type":"code"
}
],
"title":"Button"
}
],
"id":"bf2fd902b8794da3851327a2a97f4939",
"paragraphs":[],
"title":"Wrappers for native wxPython widgets"
},
{
"children":[],
"id":"c93f45e47daa41b99164916b4092ec13",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def start_app(frame_cls, props):\n    @profile(\"render\")\n    def update(props):\n        frame.update_props(props)\n    app = wx.App()\n    props.listen(lambda: update(props.get()))\n    frame = frame_cls(None, props.get())\n    frame.Layout()\n    frame.Refresh()\n    frame.Show()\n    app.MainLoop()\n",
"type":"code"
}
],
"id":"557c451273f74393955205d772d86649",
"type":"code"
}
],
"title":"Start app"
}
],
"id":"162a73f0d72c4e7ca8d3fe246670c6c5",
"paragraphs":[],
"title":"Backend wxPython"
}
],
"id":"f4c7873224fb4dfcbe73180d7afdfd72",
"paragraphs":[],
"title":"GUI language"
},
{
"children":[
{
"children":[],
"id":"9db84eb8d14a4112840116f6cc7e119f",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def load_json_from_file(path):\n    with open(path) as f:\n        return json.load(f)\n",
"type":"code"
}
],
"id":"a72a9cd9a686412380866288ba800032",
"type":"code"
}
],
"title":"JSON"
},
{
"children":[],
"id":"fd19abbb3955433fbd490771c1d81314",
"paragraphs":[
{
"fragments":[
{
"text":"Limitation: It is not possible to profile recursive functions.",
"type":"text"
}
],
"id":"625c841cff624d018c56ab1755f76889",
"type":"text"
},
{
"chunkpath":[
"globals"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"PROFILING_TIMES = defaultdict(list)\nPROFILING_ENABLED = os.environ.get(\"RLITERATE_PROFILE\", \"\") != \"\"\n",
"type":"code"
}
],
"id":"d10d275857934de1bcedb5a066d41483",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def profile(text):\n    def wrap(fn):\n        def fn_with_timing(*args, **kwargs):\n            t1 = time.perf_counter()\n            value = fn(*args, **kwargs)\n            t2 = time.perf_counter()\n            PROFILING_TIMES[text].append(t2-t1)\n            return value\n        if PROFILING_ENABLED:\n            return fn_with_timing\n        else:\n            return fn\n    return wrap\n",
"type":"code"
}
],
"id":"e8ff463813034acc97cec36f0ed928eb",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def profile_reset():\n    def wrap(fn):\n        def fn_with_summary_and_reset(*args, **kwargs):\n            value = fn(*args, **kwargs)\n            profile_print_summary()\n            PROFILING_TIMES.clear()\n            return value\n        if PROFILING_ENABLED:\n            return fn_with_summary_and_reset\n        else:\n            return fn\n    return wrap\n",
"type":"code"
}
],
"id":"79291bdef3a44c8ab71b45faf2b20f31",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def profile_print_summary():\n    text_width = 0\n    for name, times in PROFILING_TIMES.items():\n        text_width = max(text_width, len(f\"{name} ({len(times)})\"))\n    for name, times in PROFILING_TIMES.items():\n        time = sum(times)*1000\n        print(\"{} = {:.3f}ms\".format(\n            f\"{name} ({len(times)})\".ljust(text_width),\n            time\n        ))\n    print(\"\")\n",
"type":"code"
}
],
"id":"69597944ae7c47a0af03e03c2036091e",
"type":"code"
}
],
"title":"Profiling"
},
{
"children":[],
"id":"35ef5a963f054d02b14cf8ca245e8518",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def size(w, h):\n    return (w, h)\n",
"type":"code"
}
],
"id":"90df86522a67483095acdf98bf1c58a8",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Misc"
},
{
"children":[],
"id":"ececc958dff648909493062a2283a5ae",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def im_modify(obj, path, modify_fn):\n    if path:\n        if isinstance(obj, list):\n            new_obj = list(obj)\n        elif isinstance(obj, dict):\n            new_obj = dict(obj)\n        else:\n            raise ValueError(\"unknown type\")\n        new_obj[path[0]] = im_modify(new_obj[path[0]], path[1:], modify_fn)\n        return new_obj\n    return modify_fn(obj)\n",
"type":"code"
}
],
"id":"95dd623524c84e72a68d55645dc7dbca",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Immutable"
},
{
"children":[],
"id":"8ad33ab3d75240afb87f93c0601bbb9f",
"paragraphs":[
{
"chunkpath":[
"base base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Observable(object):\n\n    def __init__(self):\n        self._listeners = []\n\n    def _notify(self, *args, **kwargs):\n        for listener in self._listeners:\n            listener(*args, **kwargs)\n\n    def listen(self, listener):\n        self._listeners.append(listener)\n\n    def unlisten(self, listener):\n        self._listeners.remove(listener)\n",
"type":"code"
}
],
"id":"ea51c18d2f0b47ccb8b01924564fcdee",
"type":"code"
}
],
"title":"Observable"
}
],
"id":"f0ec3620177047238aaecb5777a789db",
"paragraphs":[
{
"fragments":[
{
"text":"Utilities that could have been in the Python standard library.",
"type":"text"
}
],
"id":"6d9f9932e8324969a7188486c5a07773",
"type":"text"
}
],
"title":"Utilities"
},
{
"children":[
{
"children":[],
"id":"e7933f62b6c244fbbed916e00d06d1c6",
"paragraphs":[
{
"fragments":[
{
"text":"Proof of concept of new ",
"type":"text"
},
{
"text":"React",
"type":"link",
"url":"https://reactjs.org/"
},
{
"text":"-like GUI architecture. Can resize table of contents by dragging.",
"type":"text"
}
],
"id":"9d1bd3bfd8fb457ab8819277ba4eda9c",
"type":"text"
},
{
"fragments":[
{
"text":"Resizing table of contents.",
"type":"text"
}
],
"id":"61cfd2e787ff458a93a92fed798169c7",
"image_base64":"",
"type":"image"
}
],
"title":"V1 October 2019"
},
{
"children":[],
"id":"7e3461f1f12642af80ba94d79323267c",
"paragraphs":[
{
"fragments":[
{
"text":"Figure out how the document should interact with the GUI architecture. Do it by populating table of contents.",
"type":"text"
}
],
"id":"602d74d92d9e4a8782be0652ea4b41aa",
"type":"text"
},
{
"fragments":[
{
"text":"First attempt at rendering table of contents.",
"type":"text"
}
],
"id":"e71d71e98c87432182b862d4d427bfcd",
"image_base64":"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",
"type":"image"
}
],
"title":"V2 October 2019-"
}
],
"id":"359aefc7fbb54cb4b8e43182efb241a0",
"paragraphs":[],
"title":"History"
}
],
"id":"46533f3be0674d1cae08ff281edbc37d",
"paragraphs":[
{
"fragments":[
{
"text":"This is a rewrite of RLiterate with the following goals:",
"type":"text"
}
],
"id":"313389d1d33342909fe864a0717a0cd0",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Improve performance so that it is not annoying to use.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Fix bugs that make it annoying to use.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Clean up the code base and remove old cruft.",
"type":"text"
}
]
}
],
"id":"20fd19faf32a4577bdc992cfe7be4256",
"type":"list"
},
{
"fragments":[
{
"text":"Features that I will consider removing because I haven't used them much or I found the usage not pleasant:",
"type":"text"
}
],
"id":"7c08b9898a0649adb5c14324fcc678dd",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Variables.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Tab stops.",
"type":"text"
}
]
}
],
"id":"db0d204a26374f808fe6bcc676ec378c",
"type":"list"
}
],
"title":"RLiterate 2"
},
"variables":{}
}