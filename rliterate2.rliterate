{
"root_page":{
"children":[
{
"children":[],
"id":"d7be6502fd58490ba70d873d1c71b193",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def main():\n    start_app(MainFrame, MainFrameProps(sys.argv[1]))\n",
"type":"code"
}
],
"id":"9e71e85a89e143fe86cb4b90a5eed8a7",
"type":"code"
}
],
"title":"Main"
},
{
"children":[
{
"children":[],
"id":"21c17f5017644b69b2698822a4ce524e",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"frame MainFrame %layout_rows {\n  Toolbar(\n    #toolbar\n    %align[EXPAND]\n  )\n  RowDivider(\n    #toolbar_divider\n    %align[EXPAND]\n  )\n  MainArea(\n    #main_area\n    %align[EXPAND]\n    %proportion[1]\n  )\n}\n",
"type":"code"
}
],
"id":"7501efbaaca640c9aaf8e66a7309ad74",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class MainFrameProps(Props):\n\n    def __init__(self, path):\n        Props.__init__(self, {\n            \"title\": \"{} ({}) - RLiterate 2\".format(\n                os.path.basename(path),\n                os.path.abspath(os.path.dirname(path))\n            ),\n            \"toolbar_divider\": {\n                \"thickness\": 2,\n                \"color\": \"#aaaaaf\",\n            },\n        })\n        self._child(\"toolbar\", ToolbarProps())\n        self._child(\"main_area\", MainAreaProps())\n",
"type":"code"
}
],
"id":"817bfdde2cd042328c69a297120bdf9d",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel MainArea %layout_columns {\n  TableOfContents(\n    #toc\n    %align[EXPAND]\n  )\n  ColumnDivider(\n    #toc_divider\n    cursor = \"size_horizontal\"\n    @drag  = self._on_toc_divider_drag(event)\n    %align[EXPAND]\n  )\n  Workspace(\n    #workspace\n    %align[EXPAND]\n    %proportion[1]\n  )\n}\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"MainArea"
],
"prefix":"",
"type":"chunk"
}
],
"id":"a8e40ef2da854034b55c8c7a3097e3ba",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes",
"MainArea"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def _on_toc_divider_drag(self, event):\n    if event.initial:\n        self._start_width = self.prop(\"toc.width\")\n    else:\n        self.prop(\"toc.set_width\")(self._start_width+event.dx)\n",
"type":"code"
}
],
"id":"72cfc592c2ea47e499de1164ed087bdb",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class MainAreaProps(Props):\n\n    def __init__(self):\n        Props.__init__(self, {\n            \"toc_divider\": {\n                \"thickness\": 3,\n                \"color\": \"#aaaaff\",\n            },\n        })\n        self._child(\"toc\", TableOfContentsProps())\n        self._child(\"workspace\", WorkspaceProps())\n",
"type":"code"
}
],
"id":"5d9b7a83066349ac9d47a1e72e4b561d",
"type":"code"
}
],
"title":"Main frame"
},
{
"children":[],
"id":"a52749c4dac1446ba6877e63f59b00d3",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel Toolbar %layout_columns {\n  %space[#margin]\n  ToolbarButton(\n    icon = \"quit\"\n    %margin[#margin,TOP|BOTTOM]\n  )\n  %space[#margin]\n}\n",
"type":"code"
}
],
"id":"7d87330167694a41a0222b278aeb5aa5",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class ToolbarProps(Props):\n\n    def __init__(self):\n        Props.__init__(self, {\n            \"margin\": 4,\n        })\n",
"type":"code"
}
],
"id":"a2b6e1e17d804033bc21ab32625b15a9",
"type":"code"
}
],
"title":"Toolbar"
},
{
"children":[],
"id":"1f79ba6407164d8dbcc3f2e90f409093",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel TableOfContents %layout_rows {\n  min_size = size(#width -1)\n}\n",
"type":"code"
}
],
"id":"e0db56dacc9f4aa3b223033b6feee2f2",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class TableOfContentsProps(Props):\n\n    def __init__(self):\n        Props.__init__(self, {\n            \"background\": \"#ffeeff\",\n            \"width\": 230,\n            \"set_width\": self._set_width,\n        })\n\n    def _set_width(self, value):\n        self._replace(\"width\", max(50, value))\n",
"type":"code"
}
],
"id":"2a866818635048c794a1a4be3e35509d",
"type":"code"
}
],
"title":"Table of contents"
},
{
"children":[],
"id":"e6a157bbac8842a2b8c625bfa9255159",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel Workspace %layout_columns {\n}\n",
"type":"code"
}
],
"id":"3e408b8af8bf432f9db783f07ea161d8",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class WorkspaceProps(Props):\n\n    def __init__(self):\n        Props.__init__(self, {\n        })\n",
"type":"code"
}
],
"id":"1bd7139b569d41039b4661e345deb68d",
"type":"code"
}
],
"title":"Workspace"
},
{
"children":[],
"id":"b022c98477a04ed2a492e75f63e75796",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel RowDivider %layout_columns {\n  background = #color\n  min_size   = size(-1 #thickness)\n}\n",
"type":"code"
}
],
"id":"6b9bbfc9a6cd4bb88cea712ebb9909dd",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel ColumnDivider %layout_rows {\n  background = #color\n  min_size   = size(#thickness -1)\n}\n",
"type":"code"
}
],
"id":"5c17f50053b24b4cadb41b3de44a038a",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
}
],
"title":"Dividers"
}
],
"id":"d625649aae0a40bcb3e2e8cc9ede4373",
"paragraphs":[],
"title":"GUI"
},
{
"children":[],
"id":"27c8072213a94090a6d0d5e1362ab3ed",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def load_document_from_file(path):\n    if os.path.exists(path):\n        return load_json_from_file(path)\n    else:\n        return create_new_document()\n",
"type":"code"
}
],
"id":"7f67cb9003a14964a74bf495a8cce6f8",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def create_new_document():\n    return {\n        \"root_page\": create_new_page(),\n        \"variables\": {},\n    }\n",
"type":"code"
}
],
"id":"1c35c112ce9f41659a6a6c8a4062f564",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def create_new_page():\n    return {\n        \"id\": genid(),\n        \"title\": \"New page...\",\n        \"children\": [],\n        \"paragraphs\": [],\n    }\n",
"type":"code"
}
],
"id":"62b40e83cdde43209245d76e123bdb5a",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def genid():\n    return uuid.uuid4().hex\n",
"type":"code"
}
],
"id":"e6bca528d2f94219b720e92cd5ddf925",
"type":"code"
}
],
"title":"Document"
},
{
"children":[
{
"children":[],
"id":"9db84eb8d14a4112840116f6cc7e119f",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def load_json_from_file(path):\n    with open(path) as f:\n        return json.load(f)\n",
"type":"code"
}
],
"id":"a72a9cd9a686412380866288ba800032",
"type":"code"
}
],
"title":"JSON"
},
{
"children":[],
"id":"fd19abbb3955433fbd490771c1d81314",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def profile(text):\n    def wrap(fn):\n        def fn_with_timing(*args, **kwargs):\n            t1 = time.perf_counter()\n            value = fn(*args, **kwargs)\n            t2 = time.perf_counter()\n            print(\"{:<10} = {:.3f}ms\".format(text, 1000*(t2-t1)))\n            return value\n        if \"--profile\" in sys.argv:\n            return fn_with_timing\n        else:\n            return fn\n    return wrap\n",
"type":"code"
}
],
"id":"e8ff463813034acc97cec36f0ed928eb",
"type":"code"
},
{
"fragments":[
{
"text":"TODO: Make this not dependent on sys.argv. (But still preserve no-overhead-if-not-used behavior.)",
"type":"strong"
}
],
"id":"1463e3049ca94161b4c98aa4c855f654",
"type":"text"
}
],
"title":"Profile"
},
{
"children":[],
"id":"35ef5a963f054d02b14cf8ca245e8518",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def size(w, h):\n    return (w, h)\n",
"type":"code"
}
],
"id":"90df86522a67483095acdf98bf1c58a8",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Misc"
},
{
"children":[],
"id":"ececc958dff648909493062a2283a5ae",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def im_modify(obj, path, modify_fn):\n    if path:\n        if isinstance(obj, list):\n            new_obj = list(obj)\n        elif isinstance(obj, dict):\n            new_obj = dict(obj)\n        else:\n            raise ValueError(\"unknown type\")\n        new_obj[path[0]] = im_modify(new_obj[path[0]], path[1:], modify_fn)\n        return new_obj\n    return modify_fn(obj)\n",
"type":"code"
}
],
"id":"95dd623524c84e72a68d55645dc7dbca",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Immutable"
}
],
"id":"f0ec3620177047238aaecb5777a789db",
"paragraphs":[],
"title":"Utilities"
},
{
"children":[
{
"children":[
{
"children":[],
"id":"05f21609be344a7396ee38ae3c05e278",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"GuiParser {\n  widget =\n    container:container WS NAME:name layout:layout\n    WS '{' widgetBody:body WS '}' ' '* '\\n'? .*:verbatim -> [\n      \"widget\"\n      name\n      container\n      layout\n      extract(body \"prop\")\n      extract(body \"instance\")\n      join(verbatim)\n    ]\n  container =\n    WS (\n      | 'frame'\n      | 'panel'\n    ):x !NameChar -> [\"container\" x]\n  layout =\n    WS (\n      | '%layout_rows'\n      | '%layout_columns'\n    ):x !NameChar -> [\"layout\" x]\n  widgetBody =\n    (\n      | builtInInstance\n      | instance\n      | prop\n    )*:xs -> partition(xs)\n  builtInInstance =\n    WS '%space' !NameChar WS '[' expr:x WS ']' -> [\"instance\" \"%space\" x]\n  instance =\n    WS NAME:x '(' instanceBody*:xs WS ')' -> [\"instance\" x xs]\n  instanceBody =\n    | layoutAttribute\n    | propExplode\n    | propAssign\n    | handler\n  layoutAttribute =\n    | WS '%proportion[' number:x WS ']'             -> [\"layoutAttribute\" \"proportion\" x]\n    | WS '%align[' WS 'EXPAND' WS ']'               -> [\"layoutAttribute\" \"align\" \"expand\"]\n    | WS '%margin[' expr:x ',' marginSides:y WS ']' -> [\"layoutAttribute\" \"margin\" x ~y]\n  marginSides = marginSide:x ('|' marginSide)*:xs -> [x ~xs]\n  marginSide = (\n    | 'TOP'\n    | 'BOTTOM'\n    ):x -> [\"marginSide\" x]\n  propExplode = WS PropChain:x          -> [\"propExplode\" x]\n  propAssign = WS NAME:x WS '=' expr:y -> [\"propAssign\" x y]\n  handler = WS '@' NAME:x WS '=' expr:y -> [\"handler\" x y]\n  expr = expr1:x ('.' expr1)*:xs -> [\"chain\" x ~xs]\n  expr1 = (string | call | number | propRef | identifier)\n  string      = WS STRING:x             -> [\"string\" x]\n  call        = (identifier|propRef):x '(' expr*:xs WS ')' -> [\"call\" x ~xs]\n  number      = WS NUMBER:x             -> [\"number\" x]\n  propRef     = WS PropChain:x          -> [\"propRef\" x]\n  identifier  = WS NAME:x               -> [\"identifier\" x]\n  prop        = WS NAME:x WS '=' expr:y -> [\"prop\" x y]\n  PropChain   = '#' NAME:x ('.' NAME)*:xs !NameChar -> join([x ~xs] \".\")\n  NUMBER      = ('-' | -> \"\"):x Digit:y Digit*:ys   -> int(join([x y ~ys]))\n  Digit       = '0'-'9'\n  NAME        = NameStart:x NameChar*:xs            -> join([x ~xs])\n  NameStart   = 'a'-'z' | 'A'-'Z' | '_'\n  NameChar    = NameStart | '0'-'9'\n  STRING      = '\"' (!'\"' .)*:xs '\"'                -> join(xs)\n  WS          = (' ' | '\\n')*\n}\n",
"type":"code"
}
],
"id":"d69da27c0c3046f08ad2347433cdaaf3",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
},
{
"chunkpath":[
"support"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def join(items, sep=\"\"):\n    return sep.join(items)\n",
"type":"code"
}
],
"id":"b762d2f9dacf44c0914eadb32ef5d1fc",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"support"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def partition(values):\n    by_type = defaultdict(list)\n    for x in values:\n        by_type[x[0]].append(x)\n    return by_type\n",
"type":"code"
}
],
"id":"cdbf7f0cd1754a718c370450a4f01496",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"support"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def extract(by_type, name):\n    return by_type[name]\n",
"type":"code"
}
],
"id":"5e88fc430da84fc1a21ffe6afa2b4e44",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Parser"
},
{
"children":[],
"id":"7c7bfc3d69a0434ab62157bd6f274209",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"WxCodeGenerator {\n  ast = [%:x] -> x\n  astItems =\n    | ast:x astItem*:xs -> { x xs }\n    |                   -> {}\n  astItem = ast:x -> { \", \" x }\n  widget = .:name ast:container ast:sizer [ast*:props] [ast*:inst] .:verbatim -> {\n    \"class \" name \"(\" container \"):\\n\\n\" >\n      \"def _get_local_props(self):\\n\" >\n        \"return {\\n\" >\n          props\n        < \"}\\n\\n\"\n      <\n      \"def _create_sizer(self):\\n\" >\n        \"return \" sizer \"\\n\\n\"\n      <\n      \"def _create_widgets(self):\\n\" >\n        \"pass\\n\"\n        inst\n      <\n      verbatim\n    <\n  }\n  instance =\n    | \"%space\" ast:x -> {\n      \"self._create_space(\" x \")\\n\"\n    }\n    | .:name [ast*:xs] -> {\n      \"props = {}\\n\"\n      \"sizer = {\\\"flag\\\": 0, \\\"border\\\": 0, \\\"proportion\\\": 0}\\n\"\n      \"handlers = {}\\n\"\n      xs\n      \"self._create_widget(\" name \", props, sizer, handlers)\\n\"\n    }\n  layoutAttribute =\n    | \"proportion\" ast:x      -> { \"sizer[\\\"proportion\\\"] = \" x \"\\n\" }\n    | \"align\" \"expand\"        -> { \"sizer[\\\"flag\\\"] |= wx.EXPAND\\n\" }\n    | \"margin\" ast:x ast*:ys  -> { \"sizer[\\\"border\\\"] = \" x \"\\n\" ys }\n  marginSide =\n    | \"TOP\"    -> \"sizer[\\\"flag\\\"] |= wx.TOP\\n\"\n    | \"BOTTOM\" -> \"sizer[\\\"flag\\\"] |= wx.BOTTOM\\n\"\n  prop = py:name ast:default -> {\n    name \": \" default \",\\n\"\n  }\n  chain = ast:x chainAst*:xs -> { x xs }\n  chainAst = ast:x -> { \".\" x }\n  propRef = py:name -> { \"self.prop(\" name \")\" }\n  propAssign = py:name ast:value -> { \"props[\" name \"] = \" value \"\\n\" }\n  propExplode = py:name -> { \"props.update(self.prop(\" name \"))\\n\" }\n  call = ast:x astItems:y -> { x \"(\" y \")\" }\n  handler = py:name ast:y -> { \"handlers[\" name \"] = lambda event: \" y \"\\n\" }\n  layout =\n    | \"%layout_rows\"    -> \"wx.BoxSizer(wx.VERTICAL)\"\n    | \"%layout_columns\" -> \"wx.BoxSizer(wx.HORIZONTAL)\"\n  container =\n    | \"frame\" -> \"RLGuiFrame\"\n    | \"panel\" -> \"RLGuiPanel\"\n  string = py\n  number = py\n  identifier = .\n  py = .:x -> repr(x)\n}\n",
"type":"code"
}
],
"id":"68d4bdf87385458bbeda3cad93d14212",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
},
{
"fragments":[
{
"text":"todo: What is the correct name of _get_props? More like setting derived/default props.",
"type":"strong"
}
],
"id":"3df64ac884e04f6680fec150bb86f74e",
"type":"text"
}
],
"title":"Code generator"
}
],
"id":"26afd5121ebb4f6eafe5ccb1e934ffd3",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"#!/usr/bin/env python2\n\nfrom collections import defaultdict\nimport sys\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"support"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    parser = GuiParser()\n    codegenerator = WxCodeGenerator()\n    try:\n        sys.stdout.write(\n            codegenerator.run(\"ast\", parser.run(\"widget\", sys.stdin.read()))\n        )\n    except _MatchError as e:\n        sys.stderr.write(e.describe())\n        sys.exit(1)\n",
"type":"code"
}
],
"id":"e8901611eb4941229bd35edab5f6e8b7",
"type":"code"
},
{
"chunkpath":[
"support"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"# Placeholder to generate support library\n",
"type":"code"
}
],
"id":"7f08cdb6050944b98378a4b4106105d9",
"language":"",
"post_process":[
"python",
"rlmeta/rlmeta.py",
"--support"
],
"type":"code"
}
],
"title":"Compiler"
},
{
"children":[
{
"children":[],
"id":"35d081d36a7546bbb2c4785312fb3a12",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiMixin(object):\n\n    def __init__(self, props):\n        self._props = {}\n        self._builtin_handlers = {}\n        self._setup_gui()\n        self.update_props(props, False)\n\n    def _setup_gui(self):\n        self._register_builtin(\"background\", self.SetBackgroundColour)\n        self._register_builtin(\"min_size\", self.SetMinSize)\n        self._register_builtin(\"cursor\", lambda value:\n            self.SetCursor({\n                \"size_horizontal\": wx.Cursor(wx.CURSOR_SIZEWE),\n            }.get(value, wx.Cursor(wx.CURSOR_QUESTION_ARROW)))\n        )\n\n    def prop(self, path):\n        value = self._props\n        for part in path.split(\".\"):\n            value = value[part]\n        return value\n\n    def update_props(self, props, layout=True):\n        if self._update_props(props):\n            self._update_gui()\n            if layout:\n                self.Layout()\n                self.Refresh()\n\n    def _update_props(self, props):\n        self._changed_props = []\n        for p in [lambda: props, self._get_local_props]:\n            for key, value in p().items():\n                if self._prop_differs(key, value):\n                    self._props[key] = value\n                    self._changed_props.append(key)\n        return len(self._changed_props) > 0\n\n    def _get_local_props(self):\n        return {}\n\n    def _prop_differs(self, key, value):\n        if key not in self._props:\n            return True\n        if self._props[key] is value:\n            return False\n        if self._props[key] == value:\n            return False\n        return True\n\n    def _update_gui(self):\n        for name in self._changed_props:\n            if name in self._builtin_handlers:\n                self._builtin_handlers[name](self._props[name])\n\n    def _register_builtin(self, name, fn):\n        self._builtin_handlers[name] = fn\n",
"type":"code"
}
],
"id":"a0987644a69445dea88e612f31f16eba",
"type":"code"
},
{
"fragments":[
{
"text":"TODO: What is the correct place to call Layout?",
"type":"strong"
}
],
"id":"80667da1c87e43429e602520f8ea13d8",
"type":"text"
}
],
"title":"Base"
},
{
"children":[],
"id":"70714ee9823a41518a42251ffb370b01",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiContainerMixin(RLGuiMixin):\n\n    def _setup_gui(self):\n        RLGuiMixin._setup_gui(self)\n        self.Sizer = self._create_sizer()\n        self._children = []\n\n    def _update_gui(self):\n        RLGuiMixin._update_gui(self)\n        self._sizer_index = 0\n        self._child_index = 0\n        self._create_widgets()\n\n    def _create_widgets(self):\n        raise NotImplementedError()\n\n    def _create_widget(self, widget_cls, props, sizer, handlers):\n        if self._child_index >= len(self._children):\n            widget = widget_cls(self, props)\n            for handler, fn in handlers.items():\n                if handler == \"drag\":\n                    DragHandler(widget, fn)\n            sizer_item = self.Sizer.Insert(self._sizer_index, widget, **sizer)\n            self._children.insert(self._child_index, (widget, sizer_item))\n        else:\n            widget, sizer_item = self._children[self._child_index]\n            widget.update_props(props, False)\n            sizer_item.SetBorder(sizer[\"border\"])\n            sizer_item.SetProportion(sizer[\"proportion\"])\n        self._sizer_index += 1\n        self._child_index += 1\n\n    def _create_space(self, thickness):\n        if self._child_index >= len(self._children):\n            self._children.insert(self._child_index, self.Sizer.Insert(\n                self._sizer_index,\n                self._get_space_size(thickness)\n            ))\n        else:\n            self._children[self._child_index].SetMinSize(\n                self._get_space_size(thickness)\n            )\n        self._sizer_index += 1\n        self._child_index += 1\n\n    def _get_space_size(self, size):\n        if self.Sizer.Orientation == wx.HORIZONTAL:\n            return (size, 1)\n        else:\n            return (1, size)\n",
"type":"code"
}
],
"id":"e09eeec305864f0e9a791b0e287def75",
"type":"code"
}
],
"title":"Container"
},
{
"children":[],
"id":"e5101e53ceb24575920e4cb52b50298e",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class DragHandler(object):\n\n    def __init__(self, widget, handler):\n        self._widget = widget\n        self._handler = handler\n        widget.Bind(wx.EVT_LEFT_DOWN, self._down)\n        widget.Bind(wx.EVT_LEFT_UP, self._up)\n        widget.Bind(wx.EVT_MOTION, self._move)\n        self._down_pos = None\n\n    def _down(self, wx_event):\n        self._down_pos = self._widget.ClientToScreen(wx_event.Position)\n        self._handler(DragEvent(True, 0))\n\n    def _up(self, wx_event):\n        self._down_pos = None\n\n    def _move(self, wx_event):\n        if self._down_pos is not None:\n            new_pos = self._widget.ClientToScreen(wx_event.Position)\n            self._handler(DragEvent(False, new_pos.x-self._down_pos.x))\n",
"type":"code"
}
],
"id":"0ec8866b29734c2ca5d8699411d5f613",
"type":"code"
},
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"DragEvent = namedtuple(\"DragEvent\", \"initial,dx\")\n",
"type":"code"
}
],
"id":"c271e666cf75407b9f4d10b0860cbae8",
"type":"code"
},
{
"fragments":[
{
"text":"TODO: Flesh out better event handling architecture.",
"type":"strong"
}
],
"id":"09bc24b72d544b65affb2761c3c8b8e9",
"type":"text"
}
],
"title":"Event handling"
},
{
"children":[],
"id":"bf2fd902b8794da3851327a2a97f4939",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiFrame(wx.Frame, RLGuiContainerMixin):\n\n    def __init__(self, parent, props):\n        wx.Frame.__init__(self, parent)\n        RLGuiContainerMixin.__init__(self, props)\n\n    def _setup_gui(self):\n        RLGuiContainerMixin._setup_gui(self)\n        self._register_builtin(\"title\", self.SetTitle)\n",
"type":"code"
}
],
"id":"1f2d77d65d6345b884d7755a1e963332",
"type":"code"
},
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiPanel(wx.Panel, RLGuiContainerMixin):\n\n    def __init__(self, parent, props):\n        wx.Panel.__init__(self, parent)\n        RLGuiContainerMixin.__init__(self, props)\n",
"type":"code"
}
],
"id":"c16e05ddb3ef4549ad64ffc3f46a411a",
"type":"code"
},
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class ToolbarButton(wx.BitmapButton, RLGuiMixin):\n\n    def __init__(self, parent, props):\n        wx.BitmapButton.__init__(self, parent, style=wx.NO_BORDER)\n        RLGuiMixin.__init__(self, props)\n\n    def _setup_gui(self):\n        RLGuiMixin._setup_gui(self)\n        self._register_builtin(\"icon\", lambda value:\n            self.SetBitmap(wx.ArtProvider.GetBitmap(\n                {\n                    \"add\": wx.ART_ADD_BOOKMARK,\n                    \"back\": wx.ART_GO_BACK,\n                    \"forward\": wx.ART_GO_FORWARD,\n                    \"undo\": wx.ART_UNDO,\n                    \"redo\": wx.ART_REDO,\n                    \"quit\": wx.ART_QUIT,\n                    \"save\": wx.ART_FILE_SAVE,\n                }.get(value, wx.ART_QUESTION),\n                wx.ART_BUTTON,\n                (24, 24)\n            ))\n        )\n",
"type":"code"
}
],
"id":"a18b175c332a41bebdeb0acb6332dcbd",
"type":"code"
}
],
"title":"WX wrappers"
},
{
"children":[],
"id":"08bc729869634744b018f65f4d968a49",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Props(Observable):\n\n    def __init__(self, props):\n        Observable.__init__(self)\n        self._props = props\n\n    def _child(self, name, props):\n        self._props[name] = props.get()\n        props.listen(lambda: self._replace(name, props.get()))\n\n    def get(self):\n        return self._props\n\n    @profile(\"replace\")\n    def _replace(self, key, value):\n        self._props = dict(self._props)\n        self._props[key] = value\n        self._notify()\n",
"type":"code"
}
],
"id":"c46f943de6a340e286c6c6eefe9b61a2",
"type":"code"
},
{
"chunkpath":[
"base base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Observable(object):\n\n    def __init__(self):\n        self._listeners = []\n\n    def _notify(self, *args, **kwargs):\n        for listener in self._listeners:\n            listener(*args, **kwargs)\n\n    def listen(self, listener):\n        self._listeners.append(listener)\n\n    def unlisten(self, listener):\n        self._listeners.remove(listener)\n",
"type":"code"
}
],
"id":"ea51c18d2f0b47ccb8b01924564fcdee",
"type":"code"
}
],
"title":"Props"
},
{
"children":[],
"id":"c93f45e47daa41b99164916b4092ec13",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def start_app(frame_cls, props):\n    @profile(\"get\")\n    def get():\n        return props.get()\n    @profile(\"update\")\n    def update(props):\n        frame.update_props(props)\n    app = wx.App()\n    props.listen(lambda: update(get()))\n    frame = frame_cls(None, props.get())\n    frame.Show()\n    app.MainLoop()\n",
"type":"code"
}
],
"id":"557c451273f74393955205d772d86649",
"type":"code"
}
],
"title":"Start app"
}
],
"id":"da31b318d9f2479496494b3e56985a07",
"paragraphs":[],
"title":"Support library"
},
{
"children":[],
"id":"347b1111a1a54adb8bde870d06cbf49e",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"rlgui_lexer",
"__init__.py"
],
"fragments":[
{
"text":"from pygments.lexer import RegexLexer\nfrom pygments.token import *\n\nclass RLGuiLexer(RegexLexer):\n\n    name = 'RLGui'\n    aliases = ['rlgui']\n    filenames = ['*.rlgui']\n\n    tokens = {\n        'root': [\n            (r'\"', String, \"string\"),\n            (r'[=]', Name.Builtin),\n            (r'#\\w+([.]\\w+)*', Keyword.Declaration),\n            (r'@\\w+', Name.Exception),\n            (r'%\\w+', Comment),\n            (r'.', Text),\n        ],\n        'string': [\n            (r'[^\"\\\\]+', String),\n            (r'\"', String, \"#pop\"),\n        ],\n    }\n\n",
"type":"code"
}
],
"id":"e3b741de46484d63b5de7ea5d0479290",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"setup.py"
],
"fragments":[
{
"text":"from setuptools import setup\n\nsetup(\n    name='rlgui_lexer',\n    version='0.1',\n    packages=['rlgui_lexer'],\n    entry_points={\n        'pygments.lexers': ['rlgui_lexer=rlgui_lexer:RLGuiLexer'],\n    },\n    zip_safe=False,\n)\n",
"type":"code"
}
],
"id":"16592d2a3f3640eca209a07274bbcaba",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"install.sh"
],
"fragments":[
{
"text":"#!/bin/sh\n\nset -e\n\npip install --upgrade --user .\n\n",
"type":"code"
}
],
"id":"31514c5ac3f64c978ecdbf9cdc36711a",
"type":"code"
}
],
"title":"Pygments plugin"
}
],
"id":"f4c7873224fb4dfcbe73180d7afdfd72",
"paragraphs":[],
"title":"GUI framework"
},
{
"children":[],
"id":"165a1189e30f4ce5b22001ea8091aa9c",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"#!/usr/bin/env python3\n\nfrom collections import namedtuple\nimport os\nimport sys\nimport time\nimport uuid\nimport wx\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"functions"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"base base classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"base classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    main()\n",
"type":"code"
}
],
"id":"264da9dfb5c04b259a001f47538827a8",
"type":"code"
}
],
"title":"File"
}
],
"id":"46533f3be0674d1cae08ff281edbc37d",
"paragraphs":[
{
"fragments":[
{
"text":"This is a rewrite of RLiterate with the following goals:",
"type":"text"
}
],
"id":"313389d1d33342909fe864a0717a0cd0",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Improve performance so that it is not annoying to use.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Fix bugs that make it annoying to use.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Clean up the code base and remove old cruft.",
"type":"text"
}
]
}
],
"id":"20fd19faf32a4577bdc992cfe7be4256",
"type":"list"
},
{
"fragments":[
{
"text":"Features that I will consider removing because I haven't used them much or I found the usage not pleasant:",
"type":"text"
}
],
"id":"7c08b9898a0649adb5c14324fcc678dd",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Variables.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Tab stops.",
"type":"text"
}
]
}
],
"id":"db0d204a26374f808fe6bcc676ec378c",
"type":"list"
}
],
"title":"RLiterate 2"
},
"variables":{}
}