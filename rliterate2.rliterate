{
"root_page":{
"children":[
{
"children":[],
"id":"165a1189e30f4ce5b22001ea8091aa9c",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"#!/usr/bin/env python3\n\nfrom collections import namedtuple, defaultdict\nfrom operator import add, mul\nimport contextlib\nimport cProfile\nimport io\nimport json\nimport os\nimport pstats\nimport sys\nimport textwrap\nimport time\nimport uuid\nimport wx\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"globals"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"functions"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"base base classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"base classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"classes"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    main()\n",
"type":"code"
}
],
"id":"264da9dfb5c04b259a001f47538827a8",
"type":"code"
}
],
"title":"File"
},
{
"children":[],
"id":"48f01b615cea4ab8a229f1cb1c9b89a3",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def usage(script):\n    sys.exit(f\"usage: {script} <path>\")\n",
"type":"code"
}
],
"id":"665fd0f19f4f409eab4aa210dd7e61d2",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def parse_args():\n    args = {\n        \"path\": None,\n    }\n    script = sys.argv[0]\n    rest = sys.argv[1:]\n    if len(rest) != 1:\n        usage(script)\n    args[\"path\"] = rest[0]\n    return args\n",
"type":"code"
}
],
"id":"72a74e2e05dd46639122742c7832a0c1",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def main():\n    args = parse_args()\n    start_app(\n        MainFrame,\n        MainFrameProps(args[\"path\"])\n    )\n",
"type":"code"
}
],
"id":"9e71e85a89e143fe86cb4b90a5eed8a7",
"type":"code"
}
],
"title":"Main"
},
{
"children":[
{
"children":[],
"id":"21c17f5017644b69b2698822a4ce524e",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"frame MainFrame %layout_rows {\n  Toolbar(\n    #toolbar\n    %align[EXPAND]\n  )\n  RowDivider(\n    #toolbar_divider\n    %align[EXPAND]\n  )\n  MainArea(\n    #main_area\n    %align[EXPAND]\n    %proportion[1]\n  )\n}\n",
"type":"code"
}
],
"id":"7501efbaaca640c9aaf8e66a7309ad74",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class MainFrameProps(Props):\n\n    def __init__(self, path):\n        Props.__init__(self, {\n            \"title\": \"{} ({}) - RLiterate 2\".format(\n                os.path.basename(path),\n                os.path.abspath(os.path.dirname(path))\n            ),\n            \"toolbar_divider\": {\n                \"thickness\": 1,\n                \"color\": \"#aaaaaf\",\n            },\n        })\n        self._child(\"toolbar\", ToolbarProps())\n        self._child(\"main_area\", MainAreaProps(Document(path)))\n",
"type":"code"
}
],
"id":"817bfdde2cd042328c69a297120bdf9d",
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel MainArea %layout_columns {\n  TableOfContents(\n    #toc\n    %align[EXPAND]\n  )\n  ColumnDivider(\n    #toc_divider\n    cursor = \"size_horizontal\"\n    @drag  = self._on_toc_divider_drag(event)\n    %align[EXPAND]\n  )\n  Workspace(\n    #workspace\n    %align[EXPAND]\n    %proportion[1]\n  )\n}\n\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"MainArea"
],
"prefix":"",
"type":"chunk"
}
],
"id":"a8e40ef2da854034b55c8c7a3097e3ba",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes",
"MainArea"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def _on_toc_divider_drag(self, event):\n    if event.initial:\n        self._start_width = self.prop(\"toc.width\")\n    else:\n        self.prop(\"toc.set_width\")(self._start_width+event.dx)\n",
"type":"code"
}
],
"id":"72cfc592c2ea47e499de1164ed087bdb",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class MainAreaProps(Props):\n\n    def __init__(self, document):\n        Props.__init__(self, {\n            \"toc_divider\": {\n                \"thickness\": 3,\n                \"color\": \"#aaaaaf\",\n            },\n        })\n        self._child(\"toc\", TableOfContentsProps(document, Theme(), Session()))\n        self._child(\"workspace\", WorkspaceProps())\n",
"type":"code"
}
],
"id":"5d9b7a83066349ac9d47a1e72e4b561d",
"type":"code"
}
],
"title":"Main frame"
},
{
"children":[],
"id":"a52749c4dac1446ba6877e63f59b00d3",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel Toolbar %layout_columns {\n  %space[#margin]\n  ToolbarButton(\n    icon = \"quit\"\n    %margin[#margin,TOP|BOTTOM]\n  )\n  %space[#margin]\n}\n",
"type":"code"
}
],
"id":"7d87330167694a41a0222b278aeb5aa5",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class ToolbarProps(Props):\n\n    def __init__(self):\n        Props.__init__(self, {\n            \"margin\": 4,\n        })\n",
"type":"code"
}
],
"id":"a2b6e1e17d804033bc21ab32625b15a9",
"type":"code"
}
],
"title":"Toolbar"
},
{
"children":[],
"id":"1f79ba6407164d8dbcc3f2e90f409093",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"vscroll TableOfContents %layout_rows {\n  min_size = size(#width -1)\n  loop (#rows) {\n    TableOfContentsRow(\n      $\n      __reuse = $id\n      __cache = \"yes\"\n      margin  = 2\n      %align[EXPAND]\n    )\n    RowDivider(\n      thickness = 2\n      color     = default_color()\n      __cache   = \"yes\"\n      %align[EXPAND]\n    )\n  }\n}\n",
"type":"code"
}
],
"id":"e0db56dacc9f4aa3b223033b6feee2f2",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel TableOfContentsRow %layout_columns {\n  %space[add(#margin mul(#level #indent_size))]\n  if (#has_children) {\n    ExpandCollapse(\n      cursor    = \"hand\"\n      size      = #indent_size\n      collapsed = #collapsed\n      @click    = #toggle(#id)\n      %align[EXPAND]\n    )\n  } else {\n    %space[#indent_size]\n  }\n  Text(\n    text = #title\n    %align[EXPAND]\n    %margin[#margin,ALL]\n  )\n}\n",
"type":"code"
}
],
"id":"e70e2005249e4fa29780c11f6dd1bb4c",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class TableOfContentsProps(Props):\n\n    def __init__(self, document, theme, session):\n        self._document = document\n        self._document.listen(self._update_rows)\n        self._theme = theme\n        self._theme.listen(self._on_theme_changed)\n        self._session = session\n        self._session.listen(self._on_session_changed)\n        Props.__init__(self, {\n            \"background\": self._theme.get(\"toc.background\"),\n            \"width\": self._session.get(\"toc.width\"),\n            \"set_width\": lambda value: self._session.replace(\"toc.width\", value),\n            \"rows\": self._generate_rows(),\n        })\n\n    def _on_theme_changed(self):\n        self.replace(\"background\", self._theme.get(\"toc.background\"))\n        self._update_rows()\n\n    def _on_session_changed(self):\n        self.replace(\"width\", self._session.get(\"toc.width\"))\n        self._update_rows()\n\n    def _update_rows(self):\n        self.replace(\"rows\", self._generate_rows())\n\n    def _generate_rows(self):\n        def inner(rows, page, level=0):\n            rows.append({\n                \"id\": page[\"id\"],\n                \"toggle\": self._session.toggle_collapsed,\n                \"title\": page[\"title\"],\n                \"level\": level,\n                \"has_children\": len(page[\"children\"]) > 0,\n                \"collapsed\": self._session.is_collapsed(page[\"id\"]),\n                \"indent_size\": self._theme.get(\"toc.indent_size\"),\n            })\n            if not self._session.is_collapsed(page[\"id\"]):\n                for child in page[\"children\"]:\n                    inner(rows, child, level+1)\n        rows = []\n        inner(rows, self._document.get_page())\n        return rows\n",
"type":"code"
}
],
"id":"2a866818635048c794a1a4be3e35509d",
"type":"code"
}
],
"title":"Table of contents"
},
{
"children":[],
"id":"e6a157bbac8842a2b8c625bfa9255159",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel Workspace %layout_columns {\n}\n",
"type":"code"
}
],
"id":"3e408b8af8bf432f9db783f07ea161d8",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class WorkspaceProps(Props):\n\n    def __init__(self):\n        Props.__init__(self, {\n        })\n",
"type":"code"
}
],
"id":"1bd7139b569d41039b4661e345deb68d",
"type":"code"
}
],
"title":"Workspace"
},
{
"children":[],
"id":"b022c98477a04ed2a492e75f63e75796",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel RowDivider %layout_columns {\n  background = #color\n  min_size   = size(-1 #thickness)\n}\n",
"type":"code"
}
],
"id":"6b9bbfc9a6cd4bb88cea712ebb9909dd",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
},
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"panel ColumnDivider %layout_rows {\n  background = #color\n  min_size   = size(#thickness -1)\n}\n",
"type":"code"
}
],
"id":"5c17f50053b24b4cadb41b3de44a038a",
"language":"rlgui",
"post_process":[
"python",
"rlgui/rlgui.py"
],
"type":"code"
}
],
"title":"Dividers"
}
],
"id":"d625649aae0a40bcb3e2e8cc9ede4373",
"paragraphs":[],
"title":"GUI"
},
{
"children":[],
"id":"27c8072213a94090a6d0d5e1362ab3ed",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Document(Observable):\n\n    def __init__(self, path):\n        Observable.__init__(self)\n        self._path = path\n        self._doc = load_json_from_file(path)\n\n    def get_page(self):\n        return self._doc[\"root_page\"]\n",
"type":"code"
}
],
"id":"fb0708b0726240f18415dd1e63cff22d",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def load_document_from_file(path):\n    if os.path.exists(path):\n        return load_json_from_file(path)\n    else:\n        return create_new_document()\n",
"type":"code"
}
],
"id":"7f67cb9003a14964a74bf495a8cce6f8",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def create_new_document():\n    return {\n        \"root_page\": create_new_page(),\n        \"variables\": {},\n    }\n",
"type":"code"
}
],
"id":"1c35c112ce9f41659a6a6c8a4062f564",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def create_new_page():\n    return {\n        \"id\": genid(),\n        \"title\": \"New page...\",\n        \"children\": [],\n        \"paragraphs\": [],\n    }\n",
"type":"code"
}
],
"id":"62b40e83cdde43209245d76e123bdb5a",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def genid():\n    return uuid.uuid4().hex\n",
"type":"code"
}
],
"id":"e6bca528d2f94219b720e92cd5ddf925",
"type":"code"
}
],
"title":"Document"
},
{
"children":[],
"id":"2bdaa3b1373945e0bb8ae77a1735df50",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Theme(JsonData):\n\n    def __init__(self):\n        JsonData.__init__(self, {\n            \"toc\": {\n                \"background\": \"#ffffff\",\n                \"indent_size\": 20,\n            },\n        })\n",
"type":"code"
}
],
"id":"fd85c4b0d0e34d6ea885dd572220e7ad",
"type":"code"
}
],
"title":"Theme"
},
{
"children":[],
"id":"0855548dfdab4aa68ae8e256f8a8fe0a",
"paragraphs":[
{
"chunkpath":[
"classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Session(JsonData):\n\n    def __init__(self):\n        JsonData.__init__(self, {\n            \"toc\": {\n                \"width\": 230,\n                \"collapsed\": set(),\n            },\n        })\n\n    def is_collapsed(self, page_id):\n        return page_id in self.get(\"toc.collapsed\")\n\n    def toggle_collapsed(self, page_id):\n        if self.is_collapsed(page_id):\n            self.replace(\"toc.collapsed\", self.get(\"toc.collapsed\")^set([page_id]))\n        else:\n            self.replace(\"toc.collapsed\", self.get(\"toc.collapsed\")|set([page_id]))\n\n",
"type":"code"
}
],
"id":"4e201e17e50241629bb3ac376d482c59",
"type":"code"
}
],
"title":"Session"
},
{
"children":[
{
"children":[],
"id":"fa9c9667abb14d34b60ec36cc4188b99",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"#!/usr/bin/env python2\n\nfrom collections import defaultdict\nimport sys\n\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"rlmeta support library"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"grammars"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\n",
"type":"code"
},
{
"blank_lines_before":1,
"path":[
"support functions"
],
"prefix":"",
"type":"chunk"
},
{
"text":"\nif __name__ == \"__main__\":\n    parser = GuiParser()\n    codegenerator = WxCodeGenerator()\n    try:\n        sys.stdout.write(\n            codegenerator.run(\"ast\", parser.run(\"widget\", sys.stdin.read()))\n        )\n    except _MatchError as e:\n        sys.exit(e.describe())\n",
"type":"code"
}
],
"id":"e8901611eb4941229bd35edab5f6e8b7",
"type":"code"
},
{
"chunkpath":[
"rlmeta support library"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"# Placeholder to generate RLMeta support library\n",
"type":"code"
}
],
"id":"7f08cdb6050944b98378a4b4106105d9",
"language":"",
"post_process":[
"python",
"rlmeta/rlmeta.py",
"--support"
],
"type":"code"
}
],
"title":"Compiler"
},
{
"children":[
{
"children":[],
"id":"35d081d36a7546bbb2c4785312fb3a12",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiMixin(object):\n\n    def __init__(self, props):\n        self._props = {}\n        self._builtin_props = {}\n        self._event_handlers = {}\n        self._setup_gui()\n        self.update_props(props, parent_updated=True)\n\n    @profile_sub(\"register event\")\n    def register_event_handler(self, name, fn):\n        self._event_handlers[name] = profile(f\"on_{name}\")(profile_sub(f\"on_{name}\")(fn))\n\n    def _call_event_handler(self, name, *args, **kwargs):\n        if name in self._event_handlers:\n            self._event_handlers[name](*args, **kwargs)\n\n    def _setup_gui(self):\n        pass\n\n    def prop_with_default(self, path, default):\n        try:\n            return self.prop(path)\n        except (KeyError, IndexError):\n            return default\n\n    def prop(self, path):\n        value = self._props\n        for part in path.split(\".\"):\n            value = value[part]\n        return value\n\n    def update_props(self, props, parent_updated=False):\n        if self._update_props(props):\n            self._update_gui(parent_updated)\n\n    def _update_props(self, props):\n        self._changed_props = []\n        for p in [lambda: props, self._get_local_props]:\n            for key, value in p().items():\n                if self._prop_differs(key, value):\n                    self._props[key] = value\n                    self._changed_props.append(key)\n        return len(self._changed_props) > 0\n\n    def _get_local_props(self):\n        return {}\n\n    def _prop_differs(self, key, value):\n        if key not in self._props:\n            return True\n        if self._props[key] is value:\n            return False\n        if self._props[key] == value:\n            return False\n        return True\n\n    def _update_gui(self, parent_updated):\n        for name in self._changed_props:\n            if name in self._builtin_props:\n                self._builtin_props[name](self._props[name])\n\n    @profile_sub(\"register builtin\")\n    def _register_builtin(self, name, fn):\n        self._builtin_props[name] = profile_sub(f\"builtin {name}\")(fn)\n",
"type":"code"
}
],
"id":"a0987644a69445dea88e612f31f16eba",
"type":"code"
},
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"DragEvent = namedtuple(\"DragEvent\", \"initial,dx\")\n",
"type":"code"
}
],
"id":"c271e666cf75407b9f4d10b0860cbae8",
"type":"code"
}
],
"title":"Base widget mixin"
},
{
"children":[],
"id":"08bc729869634744b018f65f4d968a49",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Props(JsonData):\n\n    def _child(self, name, props):\n        self._data[name] = props.get()\n        props.listen(lambda: self.force_replace(name, props.get()))\n",
"type":"code"
}
],
"id":"c46f943de6a340e286c6c6eefe9b61a2",
"type":"code"
}
],
"title":"Props"
}
],
"id":"da31b318d9f2479496494b3e56985a07",
"paragraphs":[],
"title":"Support library"
},
{
"children":[
{
"children":[],
"id":"05f21609be344a7396ee38ae3c05e278",
"paragraphs":[
{
"chunkpath":[
"grammars"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"GuiParser {\n  widget ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    container:container WS NAME:name layout:layout\n    WS '{' widgetBody:body WS '}' ' '* '\\n'? .*:verbatim -> [\n      \"widget\"\n      name\n      container\n      layout\n      extract(body \"prop\")\n      extract(body \"instance\")\n      join(verbatim)\n    ]\n  container ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    WS (\n      | 'frame'\n      | 'panel'\n      | 'vscroll'\n    ):x WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"container\" x]\n  layout ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    WS (\n      | '%layout_rows'\n      | '%layout_columns'\n    ):x WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layout\" x]\n  widgetBody ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    (\n      | instance\n      | prop\n    )*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> partition(xs)\n  instance ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS 'loop' WS '(' expr:x WS ')'\n      WS '{' instanceInner*:xs WS '}' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" \"%loop\" x xs]\n    | WS 'if' WS '(' expr:x WS ')'\n      WS '{' instanceInner*:ys WS '}'\n      WS 'else' WS '{' instanceInner*:zs WS '}' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" \"%if\" x ys zs]\n    | WS 'if' WS '(' expr:x WS ')'\n      WS '{' instanceInner*:ys WS '}' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" \"%if\" x ys]\n    | instanceInner\n  instanceInner ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS '%space' WB WS '[' expr:x WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" \"%space\" x]\n    | WS NAME:x '(' instanceBody*:xs WS ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"instance\" x xs]\n  instanceBody ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | layoutAttribute\n    | loopvarExplode\n    | propExplode\n    | propAssign\n    | handler\n  layoutAttribute ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    | WS '%proportion[' number:x WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layoutAttribute\" \"proportion\" x]\n    | WS '%align[' WS 'EXPAND' WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layoutAttribute\" \"align\" \"expand\"]\n    | WS '%margin[' expr:x ',' margins:y WS ']' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"layoutAttribute\" \"margin\" x ~y]\n  margins ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= margin:x ('|' margin)*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [x ~xs]\n  margin ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= (\n    | 'TOP'\n    | 'BOTTOM'\n    | 'LEFT'\n    | 'RIGHT'\n    | 'ALL'\n  ):x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"margin\" x]\n  propExplode ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS PropChain:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propExplode\" x]\n  propAssign ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NAME:x WS '=' expr:y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propAssign\" x y]\n  handler ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS '@' NAME:x WS '=' expr:y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"handler\" x y]\n  expr ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= expr1:x ('.' expr1)*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"chain\" x ~xs]\n  expr1 ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= (string | call | number | propRef | identifier | loopvarRef)\n  string ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS STRING:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"string\" x]\n  call ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"=\n    (identifier|propRef):x '(' expr*:xs WS ')' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"call\" x ~xs]\n  number ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NUMBER:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"number\" x]\n  propRef ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS PropChain:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"propRef\" x]\n  identifier ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NAME:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"identifier\" x]\n  loopvarRef ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS '$' NAME:x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"loopvarRef\" x]\n  loopvarExplode ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS '$' (NAME | -> \"\"):x ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"loopvarExplode\" x]\n  prop ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= WS NAME:x WS '=' expr:y ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> [\"prop\" x y]\n  PropChain ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= '#' NAME:x ('.' NAME)*:xs WB ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> join([x ~xs] \".\")\n",
"type":"code"
},
{
"blank_lines_before":0,
"path":[
"GuiParser"
],
"prefix":"  ",
"type":"chunk"
},
{
"text":"}\n",
"type":"code"
}
],
"id":"d69da27c0c3046f08ad2347433cdaaf3",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
},
{
"chunkpath":[
"grammars",
"GuiParser"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"NUMBER ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= ('-' | -> \"\"):x DIGIT:y DIGIT*:ys ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> int(join([x y ~ys]))\nDIGIT ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= '0'-'9'\nNAME ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= NAMESTART:x NAMECHAR*:xs ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> join([x ~xs])\nNAMESTART ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= 'a'-'z' | 'A'-'Z' | '_'\nNAMECHAR ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= NAMESTART | '0'-'9'\nSTRING ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= '\"' (!'\"' .)*:xs '\"' ",
"type":"code"
},
{
"index":20,
"type":"tabstop"
},
{
"text":"-> join(xs)\nWS ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= (' ' | '\\n')*\nWB ",
"type":"code"
},
{
"index":10,
"type":"tabstop"
},
{
"text":"= !NAMECHAR\n",
"type":"code"
}
],
"id":"bd877f114acc489a93f3088e4fd98358",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
},
{
"chunkpath":[
"support functions"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def join(items, sep=\"\"):\n    return sep.join(items)\n",
"type":"code"
}
],
"id":"b762d2f9dacf44c0914eadb32ef5d1fc",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"support functions"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def partition(values):\n    by_type = defaultdict(list)\n    for x in values:\n        by_type[x[0]].append(x)\n    return by_type\n",
"type":"code"
}
],
"id":"cdbf7f0cd1754a718c370450a4f01496",
"language":"",
"post_process":[],
"type":"code"
},
{
"chunkpath":[
"support functions"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"def extract(by_type, name):\n    return by_type[name]\n",
"type":"code"
}
],
"id":"5e88fc430da84fc1a21ffe6afa2b4e44",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Parser"
},
{
"children":[],
"id":"347b1111a1a54adb8bde870d06cbf49e",
"paragraphs":[
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"rlgui_lexer",
"__init__.py"
],
"fragments":[
{
"text":"from pygments.lexer import RegexLexer\nfrom pygments.token import *\n\nclass RLGuiLexer(RegexLexer):\n\n    name = 'RLGui'\n    aliases = ['rlgui']\n    filenames = ['*.rlgui']\n\n    tokens = {\n        'root': [\n            (r'\"', String, \"string\"),\n            (r'[=]', Name.Builtin),\n            (r'\\b(vscroll|frame|panel|loop|if|else)\\b', Keyword),\n            (r'#\\w+([.]\\w+)*', Name.Class),\n            (r'[$]\\w*', Name.Builtin),\n            (r'@\\w+', Name.Exception),\n            (r'%\\w+', Comment),\n            (r'.', Text),\n        ],\n        'string': [\n            (r'[^\"\\\\]+', String),\n            (r'\"', String, \"#pop\"),\n        ],\n    }\n\n",
"type":"code"
}
],
"id":"e3b741de46484d63b5de7ea5d0479290",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"setup.py"
],
"fragments":[
{
"text":"from setuptools import setup\n\nsetup(\n    name='rlgui_lexer',\n    version='0.1',\n    packages=['rlgui_lexer'],\n    entry_points={\n        'pygments.lexers': ['rlgui_lexer=rlgui_lexer:RLGuiLexer'],\n    },\n    zip_safe=False,\n)\n",
"type":"code"
}
],
"id":"16592d2a3f3640eca209a07274bbcaba",
"type":"code"
},
{
"chunkpath":[],
"filepath":[
"rlgui",
"pygments",
"install.sh"
],
"fragments":[
{
"text":"#!/bin/sh\n\nset -e\n\npip install --upgrade --user .\n",
"type":"code"
}
],
"id":"31514c5ac3f64c978ecdbf9cdc36711a",
"type":"code"
}
],
"title":"Pygments plugin"
}
],
"id":"26afd5121ebb4f6eafe5ccb1e934ffd3",
"paragraphs":[],
"title":"Front end"
},
{
"children":[
{
"children":[],
"id":"7c7bfc3d69a0434ab62157bd6f274209",
"paragraphs":[
{
"chunkpath":[
"grammars"
],
"filepath":[
"rlgui",
"rlgui.py"
],
"fragments":[
{
"text":"WxCodeGenerator {\n  ast = [%:x] -> x\n  astItems =\n    | ast:x astItem*:xs -> { x xs }\n    |                   -> {}\n  astItem = ast:x -> { \", \" x }\n  widget = .:name ast:container ast:sizer [ast*:props] [ast*:inst] .:verbatim -> {\n    \"class \" name \"(\" container \"):\\n\\n\" >\n      \"def _get_local_props(self):\\n\" >\n        \"return {\\n\" >\n          props\n        < \"}\\n\\n\"\n      <\n      \"def _create_sizer(self):\\n\" >\n        \"return \" sizer \"\\n\\n\"\n      <\n      \"def _create_widgets(self):\\n\" >\n        \"pass\\n\"\n        inst\n      <\n      verbatim\n    <\n  }\n  instance =\n    | \"%space\" ast:x -> {\n      \"self._create_space(\" x \")\\n\"\n    }\n    | .:name [ast*:xs] -> {\n      \"props = {}\\n\"\n      \"sizer = {\\\"flag\\\": 0, \\\"border\\\": 0, \\\"proportion\\\": 0}\\n\"\n      \"handlers = {}\\n\"\n      xs\n      \"self._create_widget(\" name \", props, sizer, handlers)\\n\"\n    }\n    | \"%loop\" ast:x [ast*:ys] -> {\n      \"with self._loop():\\n\" >\n        \"for loopvar in \" x \":\\n\" >\n          \"pass\\n\"\n          ys\n        <\n      <\n    }\n    | \"%if\" ast:x ifTrue:y ifFalse:z -> {\n      \"if_condition = \" x \"\\n\"\n      y\n      z\n    }\n  ifTrue = [ast:xs] -> {\n    \"with self._loop():\\n\" >\n      \"for loopvar in ([None] if (if_condition) else []):\\n\" >\n        \"pass\\n\"\n        xs\n      <\n    <\n  }\n  ifFalse =\n    | [ast:xs] -> {\n        \"with self._loop():\\n\" >\n          \"for loopvar in ([None] if (not if_condition) else []):\\n\" >\n            \"pass\\n\"\n            xs\n          <\n        <\n      }\n    | -> {}\n  layoutAttribute =\n    | \"proportion\" ast:x      -> { \"sizer[\\\"proportion\\\"] = \" x \"\\n\" }\n    | \"align\" \"expand\"        -> { \"sizer[\\\"flag\\\"] |= wx.EXPAND\\n\" }\n    | \"margin\" ast:x ast*:ys  -> { \"sizer[\\\"border\\\"] = \" x \"\\n\" ys }\n  margin =\n    | \"TOP\"    -> \"sizer[\\\"flag\\\"] |= wx.TOP\\n\"\n    | \"BOTTOM\" -> \"sizer[\\\"flag\\\"] |= wx.BOTTOM\\n\"\n    | \"LEFT\"   -> \"sizer[\\\"flag\\\"] |= wx.LEFT\\n\"\n    | \"RIGHT\"  -> \"sizer[\\\"flag\\\"] |= wx.RIGHT\\n\"\n    | \"ALL\"    -> \"sizer[\\\"flag\\\"] |= wx.ALL\\n\"\n  prop = py:name ast:default -> {\n    name \": \" default \",\\n\"\n  }\n  chain = ast:x chainAst*:xs -> { x xs }\n  chainAst = ast:x -> { \".\" x }\n  propRef = py:name -> { \"self.prop(\" name \")\" }\n  propAssign = py:name ast:value -> { \"props[\" name \"] = \" value \"\\n\" }\n  propExplode = py:name -> { \"props.update(self.prop(\" name \"))\\n\" }\n  loopvarRef = py:name -> { \"loopvar[\" name \"]\" }\n  loopvarExplode =\n    | \"\"      -> { \"props.update(loopvar)\\n\" }\n    | py:name -> { \"props.update(loopvar[\" name \"])\\n\" }\n  call = ast:x astItems:y -> { x \"(\" y \")\" }\n  handler = py:name ast:y -> { \"handlers[\" name \"] = lambda event: \" y \"\\n\" }\n  layout =\n    | \"%layout_rows\"    -> \"wx.BoxSizer(wx.VERTICAL)\"\n    | \"%layout_columns\" -> \"wx.BoxSizer(wx.HORIZONTAL)\"\n  container =\n    | \"frame\"   -> \"RLGuiFrame\"\n    | \"panel\"   -> \"RLGuiPanel\"\n    | \"vscroll\" -> \"RLGuiVScroll\"\n  string = py\n  number = py\n  identifier = .\n  py = .:x -> repr(x)\n}\n",
"type":"code"
}
],
"id":"68d4bdf87385458bbeda3cad93d14212",
"language":"rlmeta",
"post_process":[
"python",
"rlmeta/rlmeta.py"
],
"type":"code"
}
],
"title":"Code generator"
},
{
"children":[],
"id":"bb0987a3daff494cbaf93e74841f88a9",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiWxMixin(RLGuiMixin):\n\n    def _setup_gui(self):\n        RLGuiMixin._setup_gui(self)\n        self._setup_wx_events()\n        self._register_builtin(\"background\", self.SetBackgroundColour)\n        self._register_builtin(\"min_size\", self.SetMinSize)\n        self._register_builtin(\"cursor\", lambda value:\n            self.SetCursor({\n                \"size_horizontal\": wx.Cursor(wx.CURSOR_SIZEWE),\n                \"hand\": wx.Cursor(wx.CURSOR_HAND),\n            }.get(value, wx.Cursor(wx.CURSOR_QUESTION_ARROW)))\n        )\n\n    def _setup_wx_events(self):\n        self._wx_event_handlers = set()\n        self._wx_down_pos = None\n\n    def register_event_handler(self, name, fn):\n        RLGuiMixin.register_event_handler(self, name, fn)\n        if name == \"drag\":\n            self._bind_wx_event(wx.EVT_LEFT_DOWN, self._on_wx_left_down)\n            self._bind_wx_event(wx.EVT_LEFT_UP, self._on_wx_left_up)\n            self._bind_wx_event(wx.EVT_MOTION, self._on_wx_motion)\n        if name == \"click\":\n            self._bind_wx_event(wx.EVT_LEFT_UP, self._on_wx_left_up)\n\n    def _bind_wx_event(self, event, handler):\n        if event not in self._wx_event_handlers:\n            self._wx_event_handlers.add(event)\n            self.Bind(event, handler)\n\n    def _on_wx_left_down(self, wx_event):\n        self._wx_down_pos = self.ClientToScreen(wx_event.Position)\n        self._call_event_handler(\"drag\", DragEvent(True, 0))\n\n    def _on_wx_left_up(self, wx_event):\n        if self.HitTest(wx_event.Position) == wx.HT_WINDOW_INSIDE:\n            self._call_event_handler(\"click\", None)\n        self._wx_down_pos = None\n\n    def _on_wx_motion(self, wx_event):\n        if self._wx_down_pos is not None:\n            new_pos = self.ClientToScreen(wx_event.Position)\n            self._call_event_handler(\"drag\", DragEvent(False, new_pos.x-self._wx_down_pos.x))\n",
"type":"code"
}
],
"id":"b1beaccda0d04dd28ece317b5f5d8c55",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def default_color():\n    return None\n",
"type":"code"
}
],
"id":"ce857c89c68645dd89d5e1deb55d3c64",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Base wxPython mixin"
},
{
"children":[],
"id":"70714ee9823a41518a42251ffb370b01",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiWxContainerMixin(RLGuiWxMixin):\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._setup_layout()\n        self._children = []\n        self._inside_loop = False\n\n    def _setup_layout(self):\n        self.Sizer = self._sizer = self._create_sizer()\n        self._parent = self\n\n    def _update_gui(self, parent_updated):\n        RLGuiWxMixin._update_gui(self, parent_updated)\n        self._sizer_index = 0\n        self._child_index = 0\n        self._create_widgets()\n        if not parent_updated:\n            self._layout()\n\n    @profile_sub(\"layout\")\n    def _layout(self):\n        self.Layout()\n        self.Refresh()\n\n    def _create_widgets(self):\n        raise NotImplementedError()\n\n    @contextlib.contextmanager\n    def _loop(self):\n        self._inside_loop = True\n        if self._child_index >= len(self._children):\n            self._children.append([])\n        old_children = self._children\n        next_index = self._child_index + 1\n        self._children = self._children[self._child_index]\n        self._child_index = 0\n        try:\n            yield\n        finally:\n            self._clear_leftovers()\n            self._children = old_children\n            self._child_index = next_index\n            self._inside_loop = False\n\n    def _clear_leftovers(self):\n        child_index = self._child_index\n        sizer_index = self._sizer_index\n        num_cached = 0\n        cache_limit = self.prop_with_default(\"__cache_limit\", -1)\n        while child_index < len(self._children):\n            widget, sizer_item = self._children[child_index]\n            if (widget is not None and\n                widget.prop_with_default(\"__cache\", False) and\n                (cache_limit < 0 or num_cached < cache_limit)):\n                sizer_item.Show(False)\n                child_index += 1\n                sizer_index += 1\n                num_cached += 1\n            else:\n                if widget is None:\n                    self._sizer.Remove(sizer_index)\n                else:\n                    widget.Destroy()\n                self._children.pop(child_index)\n\n    def _create_widget(self, widget_cls, props, sizer, handlers):\n        def re_use_condition(widget):\n            if type(widget) is not widget_cls:\n                return False\n            if \"__reuse\" in props and widget.prop(\"__reuse\") != props[\"__reuse\"]:\n                return False\n            return True\n        re_use_offset = self._reuse(re_use_condition)\n        if re_use_offset == 0:\n            widget, sizer_item = self._children[self._child_index]\n            widget.update_props(props, parent_updated=True)\n            sizer_item.SetBorder(sizer[\"border\"])\n            sizer_item.SetProportion(sizer[\"proportion\"])\n        else:\n            if re_use_offset is None:\n                widget = widget_cls(self._parent, props)\n                for name, fn in handlers.items():\n                    widget.register_event_handler(name, fn)\n            else:\n                widget = self._children.pop(self._child_index+re_use_offset)[0]\n                self._sizer.Detach(self._sizer_index+re_use_offset)\n            sizer_item = self._insert_sizer(self._sizer_index, widget, **sizer)\n            self._children.insert(self._child_index, (widget, sizer_item))\n        sizer_item.Show(True)\n        self._sizer_index += 1\n        self._child_index += 1\n\n    def _create_space(self, thickness):\n        if (self._child_index < len(self._children) and\n            self._children[self._child_index][0] is None):\n            self._children[self._child_index][1].SetMinSize(\n                self._get_space_size(thickness)\n            )\n        else:\n            self._children.insert(self._child_index, (None, self._insert_sizer(\n                self._sizer_index,\n                self._get_space_size(thickness)\n            )))\n        self._sizer_index += 1\n        self._child_index += 1\n\n    def _reuse(self, condition):\n        index = 0\n        while (self._child_index+index) < len(self._children):\n            widget = self._children[self._child_index+index][0]\n            if widget is not None and condition(widget):\n                return index\n            else:\n                index += 1\n        return None\n\n    @profile_sub(\"insert sizer\")\n    def _insert_sizer(self, *args, **kwargs):\n        return self._sizer.Insert(*args, **kwargs)\n\n    def _get_space_size(self, size):\n        if self._sizer.Orientation == wx.HORIZONTAL:\n            return (size, 1)\n        else:\n            return (1, size)\n",
"type":"code"
}
],
"id":"e09eeec305864f0e9a791b0e287def75",
"type":"code"
}
],
"title":"Container mixin"
},
{
"children":[
{
"children":[],
"id":"94401a3af3024aefa6e4bc11605b9ce1",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiFrame(wx.Frame, RLGuiWxContainerMixin):\n\n    def __init__(self, parent, props):\n        wx.Frame.__init__(self, parent)\n        RLGuiWxContainerMixin.__init__(self, props)\n\n    def _setup_gui(self):\n        RLGuiWxContainerMixin._setup_gui(self)\n        self._register_builtin(\"title\", self.SetTitle)\n\n    def _setup_layout(self):\n        self._parent = wx.Panel(self)\n        self._parent.Sizer = self._sizer = self._create_sizer()\n        self.Sizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.Sizer.Add(self._parent, flag=wx.EXPAND, proportion=1)\n",
"type":"code"
}
],
"id":"1f2d77d65d6345b884d7755a1e963332",
"type":"code"
}
],
"title":"Frame"
},
{
"children":[],
"id":"65b8f97d115941a586dde12c4d78f93c",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiPanel(wx.Panel, RLGuiWxContainerMixin):\n\n    def __init__(self, parent, props):\n        wx.Panel.__init__(self, parent)\n        RLGuiWxContainerMixin.__init__(self, props)\n",
"type":"code"
}
],
"id":"c16e05ddb3ef4549ad64ffc3f46a411a",
"type":"code"
}
],
"title":"Panel"
},
{
"children":[],
"id":"6934ccab15d043f687656bff6bffc019",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class CompactScrolledWindow(wx.ScrolledWindow):\n\n    MIN_WIDTH = 200\n    MIN_HEIGHT = 200\n\n    def __init__(self, parent, style=0, size=wx.DefaultSize, step=100):\n        w, h = size\n        size = (max(w, self.MIN_WIDTH), max(h, self.MIN_HEIGHT))\n        wx.ScrolledWindow.__init__(self, parent, style=style, size=size)\n        self.Size = size\n        if style == wx.HSCROLL:\n            self.SetScrollRate(1, 0)\n            self._calc_scroll_pos = self._calc_scroll_pos_hscroll\n        elif style == wx.VSCROLL:\n            self.SetScrollRate(0, 1)\n            self._calc_scroll_pos = self._calc_scroll_pos_vscroll\n        else:\n            self.SetScrollRate(1, 1)\n            self._calc_scroll_pos = self._calc_scroll_pos_vscroll\n        self.step = step\n        self.Bind(wx.EVT_MOUSEWHEEL, self._on_mousewheel)\n\n    def _on_mousewheel(self, event):\n        x, y = self.GetViewStart()\n        delta = event.GetWheelRotation() / event.GetWheelDelta()\n        self.Scroll(*self._calc_scroll_pos(x, y, delta))\n\n    def _calc_scroll_pos_hscroll(self, x, y, delta):\n        return (x+delta*self.step, y)\n\n    def _calc_scroll_pos_vscroll(self, x, y, delta):\n        return (x, y-delta*self.step)\n",
"type":"code"
}
],
"id":"225e4dd702e94d4cb56efeb4a13c8e03",
"type":"code"
},
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class RLGuiVScroll(CompactScrolledWindow, RLGuiWxContainerMixin):\n\n    def __init__(self, parent, props):\n        CompactScrolledWindow.__init__(self, parent, wx.VERTICAL)\n        RLGuiWxContainerMixin.__init__(self, props)\n",
"type":"code"
}
],
"id":"af9eaf30478d4bd7a74611b4ccbecb97",
"type":"code"
}
],
"title":"Scroll"
},
{
"children":[],
"id":"7ea891b8ab854906b2b4cbeab03575e3",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class ToolbarButton(wx.BitmapButton, RLGuiWxMixin):\n\n    def __init__(self, parent, props):\n        wx.BitmapButton.__init__(self, parent, style=wx.NO_BORDER)\n        RLGuiWxMixin.__init__(self, props)\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._register_builtin(\"icon\", lambda value:\n            self.SetBitmap(wx.ArtProvider.GetBitmap(\n                {\n                    \"add\": wx.ART_ADD_BOOKMARK,\n                    \"back\": wx.ART_GO_BACK,\n                    \"forward\": wx.ART_GO_FORWARD,\n                    \"undo\": wx.ART_UNDO,\n                    \"redo\": wx.ART_REDO,\n                    \"quit\": wx.ART_QUIT,\n                    \"save\": wx.ART_FILE_SAVE,\n                }.get(value, wx.ART_QUESTION),\n                wx.ART_BUTTON,\n                (24, 24)\n            ))\n        )\n",
"type":"code"
}
],
"id":"a18b175c332a41bebdeb0acb6332dcbd",
"type":"code"
}
],
"title":"Toolbar button"
},
{
"children":[],
"id":"d4d5239b9cbf4d419e6eec9f99c9bbb8",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Button(wx.Button, RLGuiWxMixin):\n\n    def __init__(self, parent, props):\n        wx.Button.__init__(self, parent)\n        RLGuiWxMixin.__init__(self, props)\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._register_builtin(\"label\", self.SetLabel)\n\n    def register_event_handler(self, name, fn):\n        RLGuiWxMixin.register_event_handler(self, name, fn)\n        if name == \"button\":\n            self._bind_wx_event(wx.EVT_BUTTON, self._on_wx_button)\n\n    def _on_wx_button(self, wx_event):\n        self._call_event_handler(\"button\", None)\n",
"type":"code"
}
],
"id":"65096aa58766494b8cc5ee7ad807cfe1",
"type":"code"
}
],
"title":"Button"
}
],
"id":"bf2fd902b8794da3851327a2a97f4939",
"paragraphs":[],
"title":"Wrappers for native wxPython widgets"
},
{
"children":[],
"id":"c32443e9bbd44958830fbd62706e2f60",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class ExpandCollapse(wx.Panel, RLGuiWxMixin):\n\n    def __init__(self, parent, props):\n        wx.Panel.__init__(self, parent)\n        RLGuiWxMixin.__init__(self, props)\n        self.Bind(wx.EVT_PAINT, self._on_paint)\n\n    def _get_local_props(self):\n        return {\n            \"min_size\": (self.prop(\"size\")+1, -1),\n        }\n\n    def _on_paint(self, event):\n        dc = wx.GCDC(wx.PaintDC(self))\n        dc.SetBrush(wx.BLACK_BRUSH)\n        render = wx.RendererNative.Get()\n        (w, h) = self.Size\n        render.DrawTreeItemButton(\n            self,\n            dc,\n            (0, (h-self.prop(\"size\"))/2, self.prop(\"size\"), self.prop(\"size\")),\n            flags=0 if self.prop(\"collapsed\") else wx.CONTROL_EXPANDED\n        )\n",
"type":"code"
}
],
"id":"5efd03ca553c43f5a280ca40c6f9c0bb",
"type":"code"
}
],
"title":"Expand/Collapse"
},
{
"children":[],
"id":"427ca7e37015483fa5ef63e1dd5979d3",
"paragraphs":[
{
"chunkpath":[
"base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Text(wx.StaticText, RLGuiWxMixin):\n\n    def __init__(self, parent, props):\n        wx.Panel.__init__(self, parent)\n        RLGuiWxMixin.__init__(self, props)\n\n    def _setup_gui(self):\n        RLGuiWxMixin._setup_gui(self)\n        self._register_builtin(\"text\", self.SetLabel)\n",
"type":"code"
}
],
"id":"f3d592134f1846c787df29b547b4de51",
"type":"code"
}
],
"title":"Text"
},
{
"children":[],
"id":"c93f45e47daa41b99164916b4092ec13",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def start_app(frame_cls, props):\n    @profile_sub(\"render\")\n    def update(props):\n        frame.update_props(props)\n    @profile(\"show frame\")\n    @profile_sub(\"show frame\")\n    def show_frame():\n        props.listen(lambda: update(props.get()))\n        frame = frame_cls(None, props.get())\n        frame.Layout()\n        frame.Refresh()\n        frame.Show()\n        return frame\n    app = wx.App()\n    frame = show_frame()\n    app.MainLoop()\n",
"type":"code"
}
],
"id":"557c451273f74393955205d772d86649",
"type":"code"
}
],
"title":"Start app"
}
],
"id":"162a73f0d72c4e7ca8d3fe246670c6c5",
"paragraphs":[],
"title":"Backend wxPython"
}
],
"id":"f4c7873224fb4dfcbe73180d7afdfd72",
"paragraphs":[],
"title":"GUI language"
},
{
"children":[
{
"children":[],
"id":"9db84eb8d14a4112840116f6cc7e119f",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def load_json_from_file(path):\n    with open(path) as f:\n        return json.load(f)\n",
"type":"code"
}
],
"id":"a72a9cd9a686412380866288ba800032",
"type":"code"
}
],
"title":"JSON"
},
{
"children":[],
"id":"fd19abbb3955433fbd490771c1d81314",
"paragraphs":[
{
"fragments":[
{
"text":"Limitation: It is not possible to profile recursive functions.",
"type":"text"
}
],
"id":"625c841cff624d018c56ab1755f76889",
"type":"text"
},
{
"chunkpath":[
"globals"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"PROFILING_TIMES = defaultdict(list)\nPROFILING_ENABLED = os.environ.get(\"RLITERATE_PROFILE\", \"\") != \"\"\n",
"type":"code"
}
],
"id":"d10d275857934de1bcedb5a066d41483",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def profile_sub(text):\n    def wrap(fn):\n        def fn_with_timing(*args, **kwargs):\n            t1 = time.perf_counter()\n            value = fn(*args, **kwargs)\n            t2 = time.perf_counter()\n            PROFILING_TIMES[text].append(t2-t1)\n            return value\n        if PROFILING_ENABLED:\n            return fn_with_timing\n        else:\n            return fn\n    return wrap\n",
"type":"code"
}
],
"id":"e8ff463813034acc97cec36f0ed928eb",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def profile(text):\n    def wrap(fn):\n        def fn_with_cprofile(*args, **kwargs):\n            pr = cProfile.Profile()\n            pr.enable()\n            value = fn(*args, **kwargs)\n            pr.disable()\n            s = io.StringIO()\n            ps = pstats.Stats(pr, stream=s).sort_stats(\"tottime\")\n            ps.print_stats(10)\n            profile_print_summary(text, s.getvalue())\n            PROFILING_TIMES.clear()\n            return value\n        if PROFILING_ENABLED:\n            return fn_with_cprofile\n        else:\n            return fn\n    return wrap\n",
"type":"code"
}
],
"id":"a3d07fac2fe84e90988f1bfebd3d367a",
"type":"code"
},
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def profile_print_summary(text, cprofile_out):\n    text_width = 0\n    for name, times in PROFILING_TIMES.items():\n        text_width = max(text_width, len(f\"{name} ({len(times)})\"))\n    print(f\"=== {text} {'='*60}\")\n    print(f\"{textwrap.indent(cprofile_out.strip(), '    ')}\")\n    print(f\"--- {text} {'-'*60}\")\n    for name, times in PROFILING_TIMES.items():\n        time = sum(times)*1000\n        if time > 10:\n            color = \"\\033[31m\"\n        elif time > 5:\n            color = \"\\033[33m\"\n        else:\n            color = \"\\033[0m\"\n        print(\"    {}{} = {:.3f}ms{}\".format(\n            color,\n            f\"{name} ({len(times)})\".ljust(text_width),\n            time,\n            \"\\033[0m\"\n        ))\n",
"type":"code"
}
],
"id":"69597944ae7c47a0af03e03c2036091e",
"type":"code"
}
],
"title":"Profiling"
},
{
"children":[],
"id":"35ef5a963f054d02b14cf8ca245e8518",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def size(w, h):\n    return (w, h)\n",
"type":"code"
}
],
"id":"90df86522a67483095acdf98bf1c58a8",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Misc"
},
{
"children":[],
"id":"ececc958dff648909493062a2283a5ae",
"paragraphs":[
{
"chunkpath":[
"functions"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"def im_modify(obj, path, modify_fn):\n    if path:\n        if isinstance(obj, list):\n            new_obj = list(obj)\n        elif isinstance(obj, dict):\n            new_obj = dict(obj)\n        else:\n            raise ValueError(\"unknown type\")\n        new_obj[path[0]] = im_modify(new_obj[path[0]], path[1:], modify_fn)\n        return new_obj\n    return modify_fn(obj)\n",
"type":"code"
}
],
"id":"95dd623524c84e72a68d55645dc7dbca",
"language":"",
"post_process":[],
"type":"code"
}
],
"title":"Immutable"
},
{
"children":[],
"id":"8ad33ab3d75240afb87f93c0601bbb9f",
"paragraphs":[
{
"chunkpath":[
"base base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class Observable(object):\n\n    def __init__(self):\n        self._listeners = []\n\n    def _notify(self):\n        for listener in self._listeners:\n            listener()\n\n    def listen(self, listener):\n        self._listeners.append(listener)\n\n    def unlisten(self, listener):\n        self._listeners.remove(listener)\n",
"type":"code"
}
],
"id":"ea51c18d2f0b47ccb8b01924564fcdee",
"type":"code"
}
],
"title":"Observable"
},
{
"children":[],
"id":"6bd31a6be9b142feb21de78504dc942a",
"paragraphs":[
{
"chunkpath":[
"base base classes"
],
"filepath":[
"rliterate2.py"
],
"fragments":[
{
"text":"class JsonData(Observable):\n\n    def __init__(self, data):\n        Observable.__init__(self)\n        self._data = data\n\n    @profile_sub(\"get\")\n    def get(self, path=None):\n        value = self._data\n        if path is not None:\n            for part in path.split(\".\"):\n                value = value[part]\n        return value\n\n    def replace(self, key, value):\n        if self._replace_if_needed(key, value):\n            self._notify()\n\n    def force_replace(self, key, value):\n        self._replace(key, value)\n        self._notify()\n\n    @profile_sub(\"replace\")\n    def _replace_if_needed(self, key, value):\n        if self.get(key) != value:\n            self._replace(key, value)\n            return True\n        return False\n\n    @profile_sub(\"replace\")\n    def _replace(self, key, value):\n        self._data = im_modify(self._data, key.split(\".\"), lambda old: value)\n",
"type":"code"
}
],
"id":"3a72a7fbda6a4099864ce0d1ac7ac146",
"type":"code"
}
],
"title":"JSON data"
}
],
"id":"f0ec3620177047238aaecb5777a789db",
"paragraphs":[
{
"fragments":[
{
"text":"Utilities that could have been in the Python standard library.",
"type":"text"
}
],
"id":"6d9f9932e8324969a7188486c5a07773",
"type":"text"
}
],
"title":"Utilities"
},
{
"children":[
{
"children":[],
"id":"e7933f62b6c244fbbed916e00d06d1c6",
"paragraphs":[
{
"fragments":[
{
"text":"Proof of concept of new ",
"type":"text"
},
{
"text":"React",
"type":"link",
"url":"https://reactjs.org/"
},
{
"text":"-like GUI architecture. Can resize table of contents by dragging.",
"type":"text"
}
],
"id":"9d1bd3bfd8fb457ab8819277ba4eda9c",
"type":"text"
},
{
"fragments":[
{
"text":"Resizing table of contents.",
"type":"text"
}
],
"id":"61cfd2e787ff458a93a92fed798169c7",
"image_base64":"",
"type":"image"
}
],
"title":"V1 October 2019"
},
{
"children":[],
"id":"7e3461f1f12642af80ba94d79323267c",
"paragraphs":[
{
"fragments":[
{
"text":"Figure out how the document should interact with the GUI architecture. Do it by populating table of contents.",
"type":"text"
}
],
"id":"602d74d92d9e4a8782be0652ea4b41aa",
"type":"text"
},
{
"fragments":[
{
"text":"First attempt at rendering table of contents.",
"type":"text"
}
],
"id":"e71d71e98c87432182b862d4d427bfcd",
"image_base64":"",
"type":"image"
},
{
"fragments":[
{
"text":"Fleshing out structure.",
"type":"text"
}
],
"id":"9a40b10a780d4394966fb3497bb8a3e9",
"image_base64":"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",
"type":"image"
},
{
"fragments":[
{
"text":"Proper styling.",
"type":"text"
}
],
"id":"0e0e37dc38b341979bb7dbe1a08fd326",
"image_base64":"",
"type":"image"
}
],
"title":"V2 October 2019-"
}
],
"id":"359aefc7fbb54cb4b8e43182efb241a0",
"paragraphs":[],
"title":"History"
}
],
"id":"46533f3be0674d1cae08ff281edbc37d",
"paragraphs":[
{
"fragments":[
{
"text":"This is a rewrite of RLiterate with the following goals:",
"type":"text"
}
],
"id":"313389d1d33342909fe864a0717a0cd0",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Improve performance so that it is not annoying to use.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Fix bugs that make it annoying to use.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Clean up the code base and remove old cruft.",
"type":"text"
}
]
}
],
"id":"20fd19faf32a4577bdc992cfe7be4256",
"type":"list"
},
{
"fragments":[
{
"text":"Features that I will consider removing because I haven't used them much or I found the usage not pleasant:",
"type":"text"
}
],
"id":"7c08b9898a0649adb5c14324fcc678dd",
"type":"text"
},
{
"child_type":"unordered",
"children":[
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Variables.",
"type":"text"
}
]
},
{
"child_type":null,
"children":[],
"fragments":[
{
"text":"Tab stops.",
"type":"text"
}
]
}
],
"id":"db0d204a26374f808fe6bcc676ec378c",
"type":"list"
}
],
"title":"RLiterate 2"
},
"variables":{}
}